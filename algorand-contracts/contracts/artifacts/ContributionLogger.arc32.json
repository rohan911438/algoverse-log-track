{
  "hints": {
    "createApplication(uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "logContribution(address,string,uint64,string,string)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "verifyContribution(uint64)(uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getVolunteerStats(address)(uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bulkLogContributions(address[],string,uint64[],string[])uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "optIn()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getContractStats()(uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {
        "volunteerContributions": {
          "type": "uint64",
          "key": "volunteer_contributions"
        },
        "volunteerReputation": {
          "type": "uint64",
          "key": "volunteer_reputation"
        },
        "lastContributionTime": {
          "type": "uint64",
          "key": "last_contribution_time"
        }
      },
      "reserved": {}
    },
    "global": {
      "declared": {
        "organizerRegistryAppId": {
          "type": "uint64",
          "key": "organizer_registry_app"
        },
        "totalContributions": {
          "type": "uint64",
          "key": "total_contributions"
        },
        "contributionCounter": {
          "type": "uint64",
          "key": "contribution_counter"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 3
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 3
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "ContributionLogger",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "Initialize the ContributionLogger contract",
        "args": [
          {
            "name": "organizerRegistryAppId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "logContribution",
        "desc": "Log a contribution (called by authorized organizers)",
        "args": [
          {
            "name": "volunteer",
            "type": "address"
          },
          {
            "name": "contributionType",
            "type": "string"
          },
          {
            "name": "hours",
            "type": "uint64"
          },
          {
            "name": "description",
            "type": "string"
          },
          {
            "name": "location",
            "type": "string"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "verifyContribution",
        "desc": "Verify a contribution exists and return details",
        "args": [
          {
            "name": "contributionId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "(uint64,uint64)"
        }
      },
      {
        "name": "getVolunteerStats",
        "desc": "Get volunteer statistics",
        "args": [
          {
            "name": "volunteer",
            "type": "address"
          }
        ],
        "returns": {
          "type": "(uint64,uint64,uint64)"
        }
      },
      {
        "name": "bulkLogContributions",
        "desc": "Bulk log contributions (for efficiency)",
        "args": [
          {
            "name": "volunteers",
            "type": "address[]"
          },
          {
            "name": "contributionType",
            "type": "string"
          },
          {
            "name": "hours",
            "type": "uint64[]"
          },
          {
            "name": "descriptions",
            "type": "string[]"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "optIn",
        "desc": "Opt in to start tracking contributions",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getContractStats",
        "desc": "Get contract statistics",
        "args": [],
        "returns": {
          "type": "(uint64,uint64)"
        }
      }
    ]
  }
}