{
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "authorize(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deauthorize(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "checkAuthorization(address)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateOrganizerStats(address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getOrganizerInfo(address)(uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "optIn()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {
        "authorized": {
          "type": "uint64",
          "key": "authorized"
        },
        "reputation": {
          "type": "uint64",
          "key": "reputation"
        },
        "contributionsVerified": {
          "type": "uint64",
          "key": "contributions_verified"
        }
      },
      "reserved": {}
    },
    "global": {
      "declared": {
        "owner": {
          "type": "bytes",
          "key": "owner"
        },
        "totalOrganizers": {
          "type": "uint64",
          "key": "total_organizers"
        },
        "totalContributions": {
          "type": "uint64",
          "key": "total_contributions"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 3
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "OrganizerRegistry",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "Initialize contract on deployment",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "authorize",
        "desc": "Authorize an organizer (only owner can call)",
        "args": [
          {
            "name": "account",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deauthorize",
        "desc": "Deauthorize an organizer (only owner can call)",
        "args": [
          {
            "name": "account",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "checkAuthorization",
        "desc": "Check if an account is authorized (public method)",
        "args": [
          {
            "name": "account",
            "type": "address"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "updateOrganizerStats",
        "desc": "Update organizer stats after verifying contributions",
        "args": [
          {
            "name": "organizer",
            "type": "address"
          },
          {
            "name": "contributionsCount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getOrganizerInfo",
        "desc": "Get organizer information",
        "args": [
          {
            "name": "account",
            "type": "address"
          }
        ],
        "returns": {
          "type": "(uint64,uint64,uint64)"
        }
      },
      {
        "name": "optIn",
        "desc": "Opt into the contract (required before authorization)",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}