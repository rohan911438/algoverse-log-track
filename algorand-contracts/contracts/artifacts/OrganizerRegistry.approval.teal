#pragma version 10
intcblock 1 0 32
bytecblock 0x617574686f72697a6564 0x636f6e747269627574696f6e735f7665726966696564 0x746f74616c5f6f7267616e697a657273 0x72657075746174696f6e 0x746f74616c5f636f6e747269627574696f6e73 0x6f776e6572 0x151f7c75 0x

// This TEAL was generated by TEALScript v0.107.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(): void
//
// Initialize contract on deployment
createApplication:
	proto 0 0

	// contracts\OrganizerRegistry.algo.ts:25
	// this.owner.value = this.txn.sender
	bytec 5 //  "owner"
	txn Sender
	app_global_put

	// contracts\OrganizerRegistry.algo.ts:26
	// this.totalOrganizers.value = 0
	bytec 2 //  "total_organizers"
	intc 1 // 0
	app_global_put

	// contracts\OrganizerRegistry.algo.ts:27
	// this.totalContributions.value = 0
	bytec 4 //  "total_contributions"
	intc 1 // 0
	app_global_put
	retsub

// authorize(address)void
*abi_route_authorize:
	// account: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 0 (account) for authorize must be a address
	assert

	// execute authorize(address)void
	callsub authorize
	intc 0 // 1
	return

// authorize(account: Address): void
//
// Authorize an organizer (only owner can call)
authorize:
	proto 1 0

	// contracts\OrganizerRegistry.algo.ts:34
	// assert(this.txn.sender === this.owner.value, 'Only contract owner can authorize')
	txn Sender
	bytec 5 //  "owner"
	app_global_get
	==

	// Only contract owner can authorize
	assert

	// contracts\OrganizerRegistry.algo.ts:35
	// assert(this.authorized(account).exists, 'Account must opt-in first')
	frame_dig -1 // account: Address
	txna Applications 0
	bytec 0 //  "authorized"
	app_local_get_ex
	swap
	pop

	// Account must opt-in first
	assert

	// contracts\OrganizerRegistry.algo.ts:38
	// this.authorized(account).value = 1
	frame_dig -1 // account: Address
	bytec 0 //  "authorized"
	intc 0 // 1
	app_local_put

	// contracts\OrganizerRegistry.algo.ts:39
	// this.reputation(account).value = 100
	frame_dig -1 // account: Address
	bytec 3 //  "reputation"
	pushint 100
	app_local_put

	// contracts\OrganizerRegistry.algo.ts:40
	// this.contributionsVerified(account).value = 0
	frame_dig -1 // account: Address
	bytec 1 //  "contributions_verified"
	intc 1 // 0
	app_local_put

	// contracts\OrganizerRegistry.algo.ts:43
	// this.totalOrganizers.value = this.totalOrganizers.value + 1
	bytec 2 //  "total_organizers"
	dup
	app_global_get
	intc 0 // 1
	+
	app_global_put
	retsub

// deauthorize(address)void
*abi_route_deauthorize:
	// account: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 0 (account) for deauthorize must be a address
	assert

	// execute deauthorize(address)void
	callsub deauthorize
	intc 0 // 1
	return

// deauthorize(account: Address): void
//
// Deauthorize an organizer (only owner can call)
deauthorize:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 7 // 0x

	// contracts\OrganizerRegistry.algo.ts:50
	// assert(this.txn.sender === this.owner.value, 'Only contract owner can deauthorize')
	txn Sender
	bytec 5 //  "owner"
	app_global_get
	==

	// Only contract owner can deauthorize
	assert

	// contracts\OrganizerRegistry.algo.ts:51
	// assert(this.authorized(account).exists, 'Account must opt-in first')
	frame_dig -1 // account: Address
	txna Applications 0
	bytec 0 //  "authorized"
	app_local_get_ex
	swap
	pop

	// Account must opt-in first
	assert

	// contracts\OrganizerRegistry.algo.ts:53
	// wasAuthorized = this.authorized(account).value
	frame_dig -1 // account: Address
	bytec 0 //  "authorized"
	app_local_get
	frame_bury 0 // wasAuthorized: uint64

	// contracts\OrganizerRegistry.algo.ts:54
	// this.authorized(account).value = 0
	frame_dig -1 // account: Address
	bytec 0 //  "authorized"
	intc 1 // 0
	app_local_put

	// *if0_condition
	// contracts\OrganizerRegistry.algo.ts:56
	// wasAuthorized === 1
	frame_dig 0 // wasAuthorized: uint64
	intc 0 // 1
	==
	bz *if0_end

	// *if0_consequent
	// contracts\OrganizerRegistry.algo.ts:57
	// this.totalOrganizers.value = this.totalOrganizers.value - 1
	bytec 2 //  "total_organizers"
	dup
	app_global_get
	intc 0 // 1
	-
	app_global_put

*if0_end:
	retsub

// checkAuthorization(address)uint64
*abi_route_checkAuthorization:
	// The ABI return prefix
	bytec 6 // 0x151f7c75

	// account: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 0 (account) for checkAuthorization must be a address
	assert

	// execute checkAuthorization(address)uint64
	callsub checkAuthorization
	itob
	concat
	log
	intc 0 // 1
	return

// checkAuthorization(account: Address): uint64
//
// Check if an account is authorized (public method)
checkAuthorization:
	proto 1 1

	// *if1_condition
	// contracts\OrganizerRegistry.algo.ts:65
	// this.authorized(account).exists
	frame_dig -1 // account: Address
	txna Applications 0
	bytec 0 //  "authorized"
	app_local_get_ex
	swap
	pop
	bz *if1_end

	// *if1_consequent
	// contracts\OrganizerRegistry.algo.ts:66
	// return this.authorized(account).value;
	frame_dig -1 // account: Address
	bytec 0 //  "authorized"
	app_local_get
	retsub

*if1_end:
	// contracts\OrganizerRegistry.algo.ts:68
	// return 0;
	intc 1 // 0
	retsub

// updateOrganizerStats(address,uint64)void
*abi_route_updateOrganizerStats:
	// contributionsCount: uint64
	txna ApplicationArgs 2
	btoi

	// organizer: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 1 (organizer) for updateOrganizerStats must be a address
	assert

	// execute updateOrganizerStats(address,uint64)void
	callsub updateOrganizerStats
	intc 0 // 1
	return

// updateOrganizerStats(organizer: Address, contributionsCount: uint64): void
//
// Update organizer stats after verifying contributions
updateOrganizerStats:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 7 // 0x

	// contracts\OrganizerRegistry.algo.ts:75
	// assert(this.authorized(organizer).value === 1, 'Account not authorized')
	frame_dig -1 // organizer: Address
	bytec 0 //  "authorized"
	app_local_get
	intc 0 // 1
	==

	// Account not authorized
	assert

	// contracts\OrganizerRegistry.algo.ts:76
	// assert(this.authorized(organizer).exists, 'Organizer must opt-in first')
	frame_dig -1 // organizer: Address
	txna Applications 0
	bytec 0 //  "authorized"
	app_local_get_ex
	swap
	pop

	// Organizer must opt-in first
	assert

	// contracts\OrganizerRegistry.algo.ts:79
	// this.contributionsVerified(organizer).value = this.contributionsVerified(organizer).value + contributionsCount
	frame_dig -1 // organizer: Address
	bytec 1 //  "contributions_verified"
	frame_dig -1 // organizer: Address
	bytec 1 //  "contributions_verified"
	app_local_get
	frame_dig -2 // contributionsCount: uint64
	+
	app_local_put

	// contracts\OrganizerRegistry.algo.ts:82
	// currentReputation = this.reputation(organizer).value
	frame_dig -1 // organizer: Address
	bytec 3 //  "reputation"
	app_local_get
	frame_bury 0 // currentReputation: uint64

	// contracts\OrganizerRegistry.algo.ts:83
	// this.reputation(organizer).value = currentReputation + (contributionsCount * 10)
	frame_dig -1 // organizer: Address
	bytec 3 //  "reputation"
	frame_dig 0 // currentReputation: uint64
	frame_dig -2 // contributionsCount: uint64
	pushint 10
	*
	+
	app_local_put

	// contracts\OrganizerRegistry.algo.ts:86
	// this.totalContributions.value = this.totalContributions.value + contributionsCount
	bytec 4 //  "total_contributions"
	dup
	app_global_get
	frame_dig -2 // contributionsCount: uint64
	+
	app_global_put
	retsub

// getOrganizerInfo(address)(uint64,uint64,uint64)
*abi_route_getOrganizerInfo:
	// The ABI return prefix
	bytec 6 // 0x151f7c75

	// account: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 0 (account) for getOrganizerInfo must be a address
	assert

	// execute getOrganizerInfo(address)(uint64,uint64,uint64)
	callsub getOrganizerInfo
	concat
	log
	intc 0 // 1
	return

// getOrganizerInfo(account: Address): [uint64, uint64, uint64]
//
// Get organizer information
getOrganizerInfo:
	proto 1 1

	// *if2_condition
	// contracts\OrganizerRegistry.algo.ts:93
	// !this.authorized(account).exists
	frame_dig -1 // account: Address
	txna Applications 0
	bytec 0 //  "authorized"
	app_local_get_ex
	swap
	pop
	!
	bz *if2_end

	// *if2_consequent
	// contracts\OrganizerRegistry.algo.ts:94
	// return [0, 0, 0];
	pushbytes 0x000000000000000000000000000000000000000000000000
	retsub

*if2_end:
	// contracts\OrganizerRegistry.algo.ts:97
	// return [
	//       this.authorized(account).value,
	//       this.reputation(account).value,
	//       this.contributionsVerified(account).value
	//     ];
	frame_dig -1 // account: Address
	bytec 0 //  "authorized"
	app_local_get
	itob
	frame_dig -1 // account: Address
	bytec 3 //  "reputation"
	app_local_get
	itob
	concat
	frame_dig -1 // account: Address
	bytec 1 //  "contributions_verified"
	app_local_get
	itob
	concat
	retsub

// optIn()void
*abi_route_optIn:
	// execute optIn()void
	callsub optIn
	intc 0 // 1
	return

// optIn(): void
//
// Opt into the contract (required before authorization)
optIn:
	proto 0 0

	// contracts\OrganizerRegistry.algo.ts:109
	// this.authorized(this.txn.sender).value = 0
	txn Sender
	bytec 0 //  "authorized"
	intc 1 // 0
	app_local_put

	// contracts\OrganizerRegistry.algo.ts:110
	// this.reputation(this.txn.sender).value = 0
	txn Sender
	bytec 3 //  "reputation"
	intc 1 // 0
	app_local_put

	// contracts\OrganizerRegistry.algo.ts:111
	// this.contributionsVerified(this.txn.sender).value = 0
	txn Sender
	bytec 1 //  "contributions_verified"
	intc 1 // 0
	app_local_put
	retsub

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x73bc6501 // method "authorize(address)void"
	pushbytes 0x2a95361e // method "deauthorize(address)void"
	pushbytes 0x9f8ae48f // method "checkAuthorization(address)uint64"
	pushbytes 0xfe8ab6f2 // method "updateOrganizerStats(address,uint64)void"
	pushbytes 0xbf73786b // method "getOrganizerInfo(address)(uint64,uint64,uint64)"
	pushbytes 0x29314d95 // method "optIn()void"
	txna ApplicationArgs 0
	match *abi_route_authorize *abi_route_deauthorize *abi_route_checkAuthorization *abi_route_updateOrganizerStats *abi_route_getOrganizerInfo *abi_route_optIn

	// this contract does not implement the given ABI method for call NoOp
	err