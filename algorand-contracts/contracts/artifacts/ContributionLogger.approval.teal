#pragma version 10
intcblock 0 1 32 2 100 5 8 24
bytecblock 0x766f6c756e746565725f636f6e747269627574696f6e73 0x 0x636f6e747269627574696f6e5f636f756e746572 0x766f6c756e746565725f72657075746174696f6e 0x6c6173745f636f6e747269627574696f6e5f74696d65 0x746f74616c5f636f6e747269627574696f6e73 0x151f7c75 0x3a

// This TEAL was generated by TEALScript v0.107.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(uint64)void
*abi_route_createApplication:
	// organizerRegistryAppId: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64)void
	callsub createApplication
	intc 1 // 1
	return

// createApplication(organizerRegistryAppId: uint64): void
//
// Initialize the ContributionLogger contract
createApplication:
	proto 1 0

	// contracts\ContributionLogger.algo.ts:23
	// this.organizerRegistryAppId.value = organizerRegistryAppId
	pushbytes 0x6f7267616e697a65725f72656769737472795f617070 // "organizer_registry_app"
	frame_dig -1 // organizerRegistryAppId: uint64
	app_global_put

	// contracts\ContributionLogger.algo.ts:24
	// this.totalContributions.value = 0
	bytec 5 //  "total_contributions"
	intc 0 // 0
	app_global_put

	// contracts\ContributionLogger.algo.ts:25
	// this.contributionCounter.value = 0
	bytec 2 //  "contribution_counter"
	intc 0 // 0
	app_global_put
	retsub

// logContribution(address,string,uint64,string,string)uint64
*abi_route_logContribution:
	// The ABI return prefix
	bytec 6 // 0x151f7c75

	// location: string
	txna ApplicationArgs 5
	extract 2 0

	// description: string
	txna ApplicationArgs 4
	extract 2 0

	// hours: uint64
	txna ApplicationArgs 3
	btoi

	// contributionType: string
	txna ApplicationArgs 2
	extract 2 0

	// volunteer: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 4 (volunteer) for logContribution must be a address
	assert

	// execute logContribution(address,string,uint64,string,string)uint64
	callsub logContribution
	itob
	concat
	log
	intc 1 // 1
	return

// logContribution(volunteer: Address, contributionType: string, hours: uint64, description: string, location: string): uint64
//
// Log a contribution (called by authorized organizers)
logContribution:
	proto 5 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dupn 2

	// contracts\ContributionLogger.algo.ts:42
	// assert(hours > 0 && hours <= 24, 'Invalid hours: must be 1-24')
	frame_dig -3 // hours: uint64
	intc 0 // 0
	>
	dup
	bz *skip_and0
	frame_dig -3 // hours: uint64
	intc 7 // 24
	<=
	&&

*skip_and0:
	// Invalid hours: must be 1-24
	assert

	// contracts\ContributionLogger.algo.ts:43
	// assert(len(contributionType) > 0 && len(contributionType) <= 32, 'Invalid contribution type')
	frame_dig -2 // contributionType: string
	len
	intc 0 // 0
	>
	dup
	bz *skip_and1
	frame_dig -2 // contributionType: string
	len
	intc 2 // 32
	<=
	&&

*skip_and1:
	// Invalid contribution type
	assert

	// contracts\ContributionLogger.algo.ts:44
	// assert(len(description) <= 128, 'Description too long')
	frame_dig -4 // description: string
	len
	pushint 128
	<=

	// Description too long
	assert

	// contracts\ContributionLogger.algo.ts:45
	// assert(len(location) <= 64, 'Location too long')
	frame_dig -5 // location: string
	len
	pushint 64
	<=

	// Location too long
	assert

	// *if0_condition
	// contracts\ContributionLogger.algo.ts:48
	// !this.volunteerContributions(volunteer).exists
	frame_dig -1 // volunteer: Address
	txna Applications 0
	bytec 0 //  "volunteer_contributions"
	app_local_get_ex
	swap
	pop
	!
	bz *if0_end

	// *if0_consequent
	// contracts\ContributionLogger.algo.ts:49
	// this.volunteerContributions(volunteer).value = 0
	frame_dig -1 // volunteer: Address
	bytec 0 //  "volunteer_contributions"
	intc 0 // 0
	app_local_put

	// contracts\ContributionLogger.algo.ts:50
	// this.volunteerReputation(volunteer).value = 100
	frame_dig -1 // volunteer: Address
	bytec 3 //  "volunteer_reputation"
	intc 4 // 100
	app_local_put

	// contracts\ContributionLogger.algo.ts:51
	// this.lastContributionTime(volunteer).value = 0
	frame_dig -1 // volunteer: Address
	bytec 4 //  "last_contribution_time"
	intc 0 // 0
	app_local_put

*if0_end:
	// contracts\ContributionLogger.algo.ts:55
	// this.contributionCounter.value = this.contributionCounter.value + 1
	bytec 2 //  "contribution_counter"
	dup
	app_global_get
	intc 1 // 1
	+
	app_global_put

	// contracts\ContributionLogger.algo.ts:56
	// contributionId = this.contributionCounter.value
	bytec 2 //  "contribution_counter"
	app_global_get
	frame_bury 0 // contributionId: uint64

	// contracts\ContributionLogger.algo.ts:58
	// this.volunteerContributions(volunteer).value = this.volunteerContributions(volunteer).value + 1
	frame_dig -1 // volunteer: Address
	bytec 0 //  "volunteer_contributions"
	frame_dig -1 // volunteer: Address
	bytec 0 //  "volunteer_contributions"
	app_local_get
	intc 1 // 1
	+
	app_local_put

	// contracts\ContributionLogger.algo.ts:59
	// this.totalContributions.value = this.totalContributions.value + 1
	bytec 5 //  "total_contributions"
	dup
	app_global_get
	intc 1 // 1
	+
	app_global_put

	// contracts\ContributionLogger.algo.ts:62
	// currentReputation = this.volunteerReputation(volunteer).value
	frame_dig -1 // volunteer: Address
	bytec 3 //  "volunteer_reputation"
	app_local_get
	frame_bury 1 // currentReputation: uint64

	// contracts\ContributionLogger.algo.ts:63
	// this.volunteerReputation(volunteer).value = currentReputation + (hours * 5)
	frame_dig -1 // volunteer: Address
	bytec 3 //  "volunteer_reputation"
	frame_dig 1 // currentReputation: uint64
	frame_dig -3 // hours: uint64
	intc 5 // 5
	*
	+
	app_local_put

	// contracts\ContributionLogger.algo.ts:66
	// this.lastContributionTime(volunteer).value = globals.latestTimestamp
	frame_dig -1 // volunteer: Address
	bytec 4 //  "last_contribution_time"
	global LatestTimestamp
	app_local_put

	// contracts\ContributionLogger.algo.ts:70
	// logData = itob(contributionId) + ':' + contributionType + ':' + itob(hours) + ':' + itob(globals.latestTimestamp)
	frame_dig 0 // contributionId: uint64
	itob
	bytec 7 //  ":"
	concat
	frame_dig -2 // contributionType: string
	concat
	bytec 7 //  ":"
	concat
	frame_dig -3 // hours: uint64
	itob
	concat
	bytec 7 //  ":"
	concat
	global LatestTimestamp
	itob
	concat
	frame_bury 2 // logData: byte[]

	// contracts\ContributionLogger.algo.ts:71
	// log(logData)
	frame_dig 2 // logData: byte[]
	log

	// contracts\ContributionLogger.algo.ts:73
	// return contributionId;
	frame_dig 0 // contributionId: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// verifyContribution(uint64)(uint64,uint64)
*abi_route_verifyContribution:
	// The ABI return prefix
	bytec 6 // 0x151f7c75

	// contributionId: uint64
	txna ApplicationArgs 1
	btoi

	// execute verifyContribution(uint64)(uint64,uint64)
	callsub verifyContribution
	concat
	log
	intc 1 // 1
	return

// verifyContribution(contributionId: uint64): [uint64, uint64]
//
// Verify a contribution exists and return details
verifyContribution:
	proto 1 1

	// *if1_condition
	// contracts\ContributionLogger.algo.ts:81
	// contributionId > 0 && contributionId <= this.contributionCounter.value
	frame_dig -1 // contributionId: uint64
	intc 0 // 0
	>
	dup
	bz *skip_and2
	frame_dig -1 // contributionId: uint64
	bytec 2 //  "contribution_counter"
	app_global_get
	<=
	&&

*skip_and2:
	bz *if1_end

	// *if1_consequent
	// contracts\ContributionLogger.algo.ts:82
	// return [1, globals.latestTimestamp];
	pushbytes 0x0000000000000001
	global LatestTimestamp
	itob
	concat
	retsub

*if1_end:
	// contracts\ContributionLogger.algo.ts:84
	// return [0, 0];
	pushbytes 0x00000000000000000000000000000000
	retsub

// getVolunteerStats(address)(uint64,uint64,uint64)
*abi_route_getVolunteerStats:
	// The ABI return prefix
	bytec 6 // 0x151f7c75

	// volunteer: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 0 (volunteer) for getVolunteerStats must be a address
	assert

	// execute getVolunteerStats(address)(uint64,uint64,uint64)
	callsub getVolunteerStats
	concat
	log
	intc 1 // 1
	return

// getVolunteerStats(volunteer: Address): [uint64, uint64, uint64]
//
// Get volunteer statistics
getVolunteerStats:
	proto 1 1

	// *if2_condition
	// contracts\ContributionLogger.algo.ts:91
	// !this.volunteerContributions(volunteer).exists
	frame_dig -1 // volunteer: Address
	txna Applications 0
	bytec 0 //  "volunteer_contributions"
	app_local_get_ex
	swap
	pop
	!
	bz *if2_end

	// *if2_consequent
	// contracts\ContributionLogger.algo.ts:92
	// return [0, 0, 0];
	pushbytes 0x000000000000000000000000000000000000000000000000
	retsub

*if2_end:
	// contracts\ContributionLogger.algo.ts:95
	// return [
	//       this.volunteerContributions(volunteer).value,
	//       this.volunteerReputation(volunteer).value,
	//       this.lastContributionTime(volunteer).value
	//     ];
	frame_dig -1 // volunteer: Address
	bytec 0 //  "volunteer_contributions"
	app_local_get
	itob
	frame_dig -1 // volunteer: Address
	bytec 3 //  "volunteer_reputation"
	app_local_get
	itob
	concat
	frame_dig -1 // volunteer: Address
	bytec 4 //  "last_contribution_time"
	app_local_get
	itob
	concat
	retsub

// bulkLogContributions(address[],string,uint64[],string[])uint64
*abi_route_bulkLogContributions:
	// The ABI return prefix
	bytec 6 // 0x151f7c75

	// descriptions: string[]
	txna ApplicationArgs 4

	// hours: uint64[]
	txna ApplicationArgs 3
	extract 2 0

	// contributionType: string
	txna ApplicationArgs 2
	extract 2 0

	// volunteers: address[]
	txna ApplicationArgs 1
	extract 2 0

	// execute bulkLogContributions(address[],string,uint64[],string[])uint64
	callsub bulkLogContributions
	itob
	concat
	log
	intc 1 // 1
	return

// bulkLogContributions(volunteers: Address[], contributionType: string, hours: uint64[], descriptions: string[]): uint64
//
// Bulk log contributions (for efficiency)
bulkLogContributions:
	proto 4 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dupn 5

	// contracts\ContributionLogger.algo.ts:111
	// assert(len(volunteers) <= 10, 'Too many contributions in one call')
	frame_dig -1 // volunteers: Address[]
	len
	pushint 10
	<=

	// Too many contributions in one call
	assert

	// contracts\ContributionLogger.algo.ts:112
	// assert(len(volunteers) === len(hours), 'Mismatched volunteers and hours')
	frame_dig -1 // volunteers: Address[]
	len
	frame_dig -3 // hours: uint64[]
	len
	==

	// Mismatched volunteers and hours
	assert

	// contracts\ContributionLogger.algo.ts:113
	// assert(len(volunteers) === len(descriptions), 'Mismatched volunteers and descriptions')
	frame_dig -1 // volunteers: Address[]
	len
	frame_dig -4 // descriptions: string[]
	len
	==

	// Mismatched volunteers and descriptions
	assert

	// contracts\ContributionLogger.algo.ts:115
	// contributionsLogged: uint64 = 0
	intc 0 // 0
	frame_bury 0 // contributionsLogged: uint64

	// contracts\ContributionLogger.algo.ts:117
	// for (let i: uint64 = 0; i < len(volunteers); i = i + 1)
	intc 0 // 0
	frame_bury 1 // i: uint64

*for_0:
	// contracts\ContributionLogger.algo.ts:117
	// i < len(volunteers)
	frame_dig 1 // i: uint64
	frame_dig -1 // volunteers: Address[]
	len
	<
	bz *for_0_end

	// contracts\ContributionLogger.algo.ts:118
	// volunteer = volunteers[i]
	frame_dig -1 // volunteers: Address[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // i: uint64
	intc 2 // 32
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 2 // 32
	extract3
	frame_bury 2 // volunteer: address

	// contracts\ContributionLogger.algo.ts:119
	// volunteerHours = hours[i]
	frame_dig -3 // hours: uint64[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // i: uint64
	intc 6 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 6 // 8
	extract3
	btoi
	frame_bury 3 // volunteerHours: uint64

	// contracts\ContributionLogger.algo.ts:120
	// description = descriptions[i]
	frame_dig -4 // descriptions: string[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // i: uint64
	intc 3 // 2
	* // acc * 2
	+
	intc 3 // 2
	+ // add two for length
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	intc 3 // 2
	+ // add two for length
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 1 //  get type length
	* // multiply by type length
	intc 3 // 2
	+ // add two for length
	extract3
	extract 2 0
	frame_bury 4 // description: string

	// *if3_condition
	// contracts\ContributionLogger.algo.ts:122
	// volunteerHours > 0 && volunteerHours <= 24
	frame_dig 3 // volunteerHours: uint64
	intc 0 // 0
	>
	dup
	bz *skip_and3
	frame_dig 3 // volunteerHours: uint64
	intc 7 // 24
	<=
	&&

*skip_and3:
	bz *if3_end

	// *if3_consequent
	// *if4_condition
	// contracts\ContributionLogger.algo.ts:124
	// !this.volunteerContributions(volunteer).exists
	frame_dig 2 // volunteer: address
	txna Applications 0
	bytec 0 //  "volunteer_contributions"
	app_local_get_ex
	swap
	pop
	!
	bz *if4_end

	// *if4_consequent
	// contracts\ContributionLogger.algo.ts:125
	// this.volunteerContributions(volunteer).value = 0
	frame_dig 2 // volunteer: address
	bytec 0 //  "volunteer_contributions"
	intc 0 // 0
	app_local_put

	// contracts\ContributionLogger.algo.ts:126
	// this.volunteerReputation(volunteer).value = 100
	frame_dig 2 // volunteer: address
	bytec 3 //  "volunteer_reputation"
	intc 4 // 100
	app_local_put

	// contracts\ContributionLogger.algo.ts:127
	// this.lastContributionTime(volunteer).value = 0
	frame_dig 2 // volunteer: address
	bytec 4 //  "last_contribution_time"
	intc 0 // 0
	app_local_put

*if4_end:
	// contracts\ContributionLogger.algo.ts:131
	// this.contributionCounter.value = this.contributionCounter.value + 1
	bytec 2 //  "contribution_counter"
	dup
	app_global_get
	intc 1 // 1
	+
	app_global_put

	// contracts\ContributionLogger.algo.ts:132
	// this.volunteerContributions(volunteer).value = this.volunteerContributions(volunteer).value + 1
	frame_dig 2 // volunteer: address
	bytec 0 //  "volunteer_contributions"
	frame_dig 2 // volunteer: address
	bytec 0 //  "volunteer_contributions"
	app_local_get
	intc 1 // 1
	+
	app_local_put

	// contracts\ContributionLogger.algo.ts:133
	// this.totalContributions.value = this.totalContributions.value + 1
	bytec 5 //  "total_contributions"
	dup
	app_global_get
	intc 1 // 1
	+
	app_global_put

	// contracts\ContributionLogger.algo.ts:135
	// currentReputation = this.volunteerReputation(volunteer).value
	frame_dig 2 // volunteer: address
	bytec 3 //  "volunteer_reputation"
	app_local_get
	frame_bury 5 // currentReputation: uint64

	// contracts\ContributionLogger.algo.ts:136
	// this.volunteerReputation(volunteer).value = currentReputation + (volunteerHours * 5)
	frame_dig 2 // volunteer: address
	bytec 3 //  "volunteer_reputation"
	frame_dig 5 // currentReputation: uint64
	frame_dig 3 // volunteerHours: uint64
	intc 5 // 5
	*
	+
	app_local_put

	// contracts\ContributionLogger.algo.ts:137
	// this.lastContributionTime(volunteer).value = globals.latestTimestamp
	frame_dig 2 // volunteer: address
	bytec 4 //  "last_contribution_time"
	global LatestTimestamp
	app_local_put

	// contracts\ContributionLogger.algo.ts:139
	// contributionsLogged = contributionsLogged + 1
	frame_dig 0 // contributionsLogged: uint64
	intc 1 // 1
	+
	frame_bury 0 // contributionsLogged: uint64

*if3_end:

*for_0_continue:
	// contracts\ContributionLogger.algo.ts:117
	// i = i + 1
	frame_dig 1 // i: uint64
	intc 1 // 1
	+
	frame_bury 1 // i: uint64
	b *for_0

*for_0_end:
	// contracts\ContributionLogger.algo.ts:143
	// return contributionsLogged;
	frame_dig 0 // contributionsLogged: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 5
	retsub

// optIn()void
*abi_route_optIn:
	// execute optIn()void
	callsub optIn
	intc 1 // 1
	return

// optIn(): void
//
// Opt in to start tracking contributions
optIn:
	proto 0 0

	// contracts\ContributionLogger.algo.ts:150
	// this.volunteerContributions(this.txn.sender).value = 0
	txn Sender
	bytec 0 //  "volunteer_contributions"
	intc 0 // 0
	app_local_put

	// contracts\ContributionLogger.algo.ts:151
	// this.volunteerReputation(this.txn.sender).value = 100
	txn Sender
	bytec 3 //  "volunteer_reputation"
	intc 4 // 100
	app_local_put

	// contracts\ContributionLogger.algo.ts:152
	// this.lastContributionTime(this.txn.sender).value = 0
	txn Sender
	bytec 4 //  "last_contribution_time"
	intc 0 // 0
	app_local_put
	retsub

// getContractStats()(uint64,uint64)
*abi_route_getContractStats:
	// The ABI return prefix
	bytec 6 // 0x151f7c75

	// execute getContractStats()(uint64,uint64)
	callsub getContractStats
	concat
	log
	intc 1 // 1
	return

// getContractStats(): [uint64, uint64]
//
// Get contract statistics
getContractStats:
	proto 0 1

	// contracts\ContributionLogger.algo.ts:159
	// return [this.totalContributions.value, this.contributionCounter.value];
	bytec 5 //  "total_contributions"
	app_global_get
	itob
	bytec 2 //  "contribution_counter"
	app_global_get
	itob
	concat
	retsub

*create_NoOp:
	pushbytes 0x973b616f // method "createApplication(uint64)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x16e78438 // method "logContribution(address,string,uint64,string,string)uint64"
	pushbytes 0xddd7828b // method "verifyContribution(uint64)(uint64,uint64)"
	pushbytes 0x0d74280b // method "getVolunteerStats(address)(uint64,uint64,uint64)"
	pushbytes 0x39b4adea // method "bulkLogContributions(address[],string,uint64[],string[])uint64"
	pushbytes 0x29314d95 // method "optIn()void"
	pushbytes 0xb12cca6f // method "getContractStats()(uint64,uint64)"
	txna ApplicationArgs 0
	match *abi_route_logContribution *abi_route_verifyContribution *abi_route_getVolunteerStats *abi_route_bulkLogContributions *abi_route_optIn *abi_route_getContractStats

	// this contract does not implement the given ABI method for call NoOp
	err