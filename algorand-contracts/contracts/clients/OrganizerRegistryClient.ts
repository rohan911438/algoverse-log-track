/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"OrganizerRegistry","desc":"","methods":[{"name":"createApplication","desc":"Initialize contract on deployment","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"authorize","desc":"Authorize an organizer (only owner can call)","args":[{"name":"account","type":"address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"deauthorize","desc":"Deauthorize an organizer (only owner can call)","args":[{"name":"account","type":"address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"checkAuthorization","desc":"Check if an account is authorized (public method)","args":[{"name":"account","type":"address"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"updateOrganizerStats","desc":"Update organizer stats after verifying contributions","args":[{"name":"organizer","type":"address"},{"name":"contributionsCount","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getOrganizerInfo","desc":"Get organizer information","args":[{"name":"account","type":"address"}],"returns":{"type":"(uint64,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]}},{"name":"optIn","desc":"Opt into the contract (required before authorization)","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":1,"ints":2},"local":{"bytes":0,"ints":3}},"keys":{"global":{"owner":{"key":"b3duZXI=","keyType":"AVMBytes","valueType":"address"},"totalOrganizers":{"key":"dG90YWxfb3JnYW5pemVycw==","keyType":"AVMBytes","valueType":"uint64"},"totalContributions":{"key":"dG90YWxfY29udHJpYnV0aW9ucw==","keyType":"AVMBytes","valueType":"uint64"}},"local":{"authorized":{"key":"YXV0aG9yaXplZA==","keyType":"AVMBytes","valueType":"uint64"},"reputation":{"key":"cmVwdXRhdGlvbg==","keyType":"AVMBytes","valueType":"uint64"},"contributionsVerified":{"key":"Y29udHJpYnV0aW9uc192ZXJpZmllZA==","keyType":"AVMBytes","valueType":"uint64"}},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\OrganizerRegistry.algo.ts:10","pc":[0]},{"teal":2,"source":"contracts\\OrganizerRegistry.algo.ts:10","pc":[1,2,3,4,5]},{"teal":3,"source":"contracts\\OrganizerRegistry.algo.ts:10","pc":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101]},{"teal":15,"source":"contracts\\OrganizerRegistry.algo.ts:10","pc":[102,103]},{"teal":16,"source":"contracts\\OrganizerRegistry.algo.ts:10","pc":[104]},{"teal":17,"source":"contracts\\OrganizerRegistry.algo.ts:10","pc":[105,106]},{"teal":18,"source":"contracts\\OrganizerRegistry.algo.ts:10","pc":[107]},{"teal":19,"source":"contracts\\OrganizerRegistry.algo.ts:10","pc":[108,109]},{"teal":20,"source":"contracts\\OrganizerRegistry.algo.ts:10","pc":[110]},{"teal":21,"source":"contracts\\OrganizerRegistry.algo.ts:10","pc":[111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136]},{"teal":25,"source":"contracts\\OrganizerRegistry.algo.ts:10","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[137]},{"teal":30,"source":"contracts\\OrganizerRegistry.algo.ts:24","pc":[138,139,140]},{"teal":31,"source":"contracts\\OrganizerRegistry.algo.ts:24","pc":[141]},{"teal":32,"source":"contracts\\OrganizerRegistry.algo.ts:24","pc":[142]},{"teal":38,"source":"contracts\\OrganizerRegistry.algo.ts:24","pc":[143,144,145]},{"teal":42,"source":"contracts\\OrganizerRegistry.algo.ts:25","pc":[146,147]},{"teal":43,"source":"contracts\\OrganizerRegistry.algo.ts:25","pc":[148,149]},{"teal":44,"source":"contracts\\OrganizerRegistry.algo.ts:25","pc":[150]},{"teal":48,"source":"contracts\\OrganizerRegistry.algo.ts:26","pc":[151]},{"teal":49,"source":"contracts\\OrganizerRegistry.algo.ts:26","pc":[152]},{"teal":50,"source":"contracts\\OrganizerRegistry.algo.ts:26","pc":[153]},{"teal":54,"source":"contracts\\OrganizerRegistry.algo.ts:27","pc":[154,155]},{"teal":55,"source":"contracts\\OrganizerRegistry.algo.ts:27","pc":[156]},{"teal":56,"source":"contracts\\OrganizerRegistry.algo.ts:27","pc":[157]},{"teal":57,"source":"contracts\\OrganizerRegistry.algo.ts:24","pc":[158]},{"teal":62,"source":"contracts\\OrganizerRegistry.algo.ts:33","pc":[159,160,161]},{"teal":63,"source":"contracts\\OrganizerRegistry.algo.ts:33","pc":[162]},{"teal":64,"source":"contracts\\OrganizerRegistry.algo.ts:33","pc":[163]},{"teal":65,"source":"contracts\\OrganizerRegistry.algo.ts:33","pc":[164]},{"teal":66,"source":"contracts\\OrganizerRegistry.algo.ts:33","pc":[165]},{"teal":69,"source":"contracts\\OrganizerRegistry.algo.ts:33","errorMessage":"argument 0 (account) for authorize must be a address","pc":[166]},{"teal":72,"source":"contracts\\OrganizerRegistry.algo.ts:33","pc":[167,168,169]},{"teal":73,"source":"contracts\\OrganizerRegistry.algo.ts:33","pc":[170]},{"teal":74,"source":"contracts\\OrganizerRegistry.algo.ts:33","pc":[171]},{"teal":80,"source":"contracts\\OrganizerRegistry.algo.ts:33","pc":[172,173,174]},{"teal":84,"source":"contracts\\OrganizerRegistry.algo.ts:34","pc":[175,176]},{"teal":85,"source":"contracts\\OrganizerRegistry.algo.ts:34","pc":[177,178]},{"teal":86,"source":"contracts\\OrganizerRegistry.algo.ts:34","pc":[179]},{"teal":87,"source":"contracts\\OrganizerRegistry.algo.ts:34","pc":[180]},{"teal":90,"source":"contracts\\OrganizerRegistry.algo.ts:34","errorMessage":"Only contract owner can authorize","pc":[181]},{"teal":94,"source":"contracts\\OrganizerRegistry.algo.ts:35","pc":[182,183]},{"teal":95,"source":"contracts\\OrganizerRegistry.algo.ts:35","pc":[184,185,186]},{"teal":96,"source":"contracts\\OrganizerRegistry.algo.ts:35","pc":[187]},{"teal":97,"source":"contracts\\OrganizerRegistry.algo.ts:35","pc":[188]},{"teal":98,"source":"contracts\\OrganizerRegistry.algo.ts:35","pc":[189]},{"teal":99,"source":"contracts\\OrganizerRegistry.algo.ts:35","pc":[190]},{"teal":102,"source":"contracts\\OrganizerRegistry.algo.ts:35","errorMessage":"Account must opt-in first","pc":[191]},{"teal":106,"source":"contracts\\OrganizerRegistry.algo.ts:38","pc":[192,193]},{"teal":107,"source":"contracts\\OrganizerRegistry.algo.ts:38","pc":[194]},{"teal":108,"source":"contracts\\OrganizerRegistry.algo.ts:38","pc":[195]},{"teal":109,"source":"contracts\\OrganizerRegistry.algo.ts:38","pc":[196]},{"teal":113,"source":"contracts\\OrganizerRegistry.algo.ts:39","pc":[197,198]},{"teal":114,"source":"contracts\\OrganizerRegistry.algo.ts:39","pc":[199]},{"teal":115,"source":"contracts\\OrganizerRegistry.algo.ts:39","pc":[200,201]},{"teal":116,"source":"contracts\\OrganizerRegistry.algo.ts:39","pc":[202]},{"teal":120,"source":"contracts\\OrganizerRegistry.algo.ts:40","pc":[203,204]},{"teal":121,"source":"contracts\\OrganizerRegistry.algo.ts:40","pc":[205]},{"teal":122,"source":"contracts\\OrganizerRegistry.algo.ts:40","pc":[206]},{"teal":123,"source":"contracts\\OrganizerRegistry.algo.ts:40","pc":[207]},{"teal":127,"source":"contracts\\OrganizerRegistry.algo.ts:43","pc":[208]},{"teal":128,"source":"contracts\\OrganizerRegistry.algo.ts:43","pc":[209]},{"teal":129,"source":"contracts\\OrganizerRegistry.algo.ts:43","pc":[210]},{"teal":130,"source":"contracts\\OrganizerRegistry.algo.ts:43","pc":[211]},{"teal":131,"source":"contracts\\OrganizerRegistry.algo.ts:43","pc":[212]},{"teal":132,"source":"contracts\\OrganizerRegistry.algo.ts:43","pc":[213]},{"teal":133,"source":"contracts\\OrganizerRegistry.algo.ts:33","pc":[214]},{"teal":138,"source":"contracts\\OrganizerRegistry.algo.ts:49","pc":[215,216,217]},{"teal":139,"source":"contracts\\OrganizerRegistry.algo.ts:49","pc":[218]},{"teal":140,"source":"contracts\\OrganizerRegistry.algo.ts:49","pc":[219]},{"teal":141,"source":"contracts\\OrganizerRegistry.algo.ts:49","pc":[220]},{"teal":142,"source":"contracts\\OrganizerRegistry.algo.ts:49","pc":[221]},{"teal":145,"source":"contracts\\OrganizerRegistry.algo.ts:49","errorMessage":"argument 0 (account) for deauthorize must be a address","pc":[222]},{"teal":148,"source":"contracts\\OrganizerRegistry.algo.ts:49","pc":[223,224,225]},{"teal":149,"source":"contracts\\OrganizerRegistry.algo.ts:49","pc":[226]},{"teal":150,"source":"contracts\\OrganizerRegistry.algo.ts:49","pc":[227]},{"teal":156,"source":"contracts\\OrganizerRegistry.algo.ts:49","pc":[228,229,230]},{"teal":159,"source":"contracts\\OrganizerRegistry.algo.ts:49","pc":[231,232]},{"teal":163,"source":"contracts\\OrganizerRegistry.algo.ts:50","pc":[233,234]},{"teal":164,"source":"contracts\\OrganizerRegistry.algo.ts:50","pc":[235,236]},{"teal":165,"source":"contracts\\OrganizerRegistry.algo.ts:50","pc":[237]},{"teal":166,"source":"contracts\\OrganizerRegistry.algo.ts:50","pc":[238]},{"teal":169,"source":"contracts\\OrganizerRegistry.algo.ts:50","errorMessage":"Only contract owner can deauthorize","pc":[239]},{"teal":173,"source":"contracts\\OrganizerRegistry.algo.ts:51","pc":[240,241]},{"teal":174,"source":"contracts\\OrganizerRegistry.algo.ts:51","pc":[242,243,244]},{"teal":175,"source":"contracts\\OrganizerRegistry.algo.ts:51","pc":[245]},{"teal":176,"source":"contracts\\OrganizerRegistry.algo.ts:51","pc":[246]},{"teal":177,"source":"contracts\\OrganizerRegistry.algo.ts:51","pc":[247]},{"teal":178,"source":"contracts\\OrganizerRegistry.algo.ts:51","pc":[248]},{"teal":181,"source":"contracts\\OrganizerRegistry.algo.ts:51","errorMessage":"Account must opt-in first","pc":[249]},{"teal":185,"source":"contracts\\OrganizerRegistry.algo.ts:53","pc":[250,251]},{"teal":186,"source":"contracts\\OrganizerRegistry.algo.ts:53","pc":[252]},{"teal":187,"source":"contracts\\OrganizerRegistry.algo.ts:53","pc":[253]},{"teal":188,"source":"contracts\\OrganizerRegistry.algo.ts:53","pc":[254,255]},{"teal":192,"source":"contracts\\OrganizerRegistry.algo.ts:54","pc":[256,257]},{"teal":193,"source":"contracts\\OrganizerRegistry.algo.ts:54","pc":[258]},{"teal":194,"source":"contracts\\OrganizerRegistry.algo.ts:54","pc":[259]},{"teal":195,"source":"contracts\\OrganizerRegistry.algo.ts:54","pc":[260]},{"teal":200,"source":"contracts\\OrganizerRegistry.algo.ts:56","pc":[261,262]},{"teal":201,"source":"contracts\\OrganizerRegistry.algo.ts:56","pc":[263]},{"teal":202,"source":"contracts\\OrganizerRegistry.algo.ts:56","pc":[264]},{"teal":203,"source":"contracts\\OrganizerRegistry.algo.ts:56","pc":[265,266,267]},{"teal":208,"source":"contracts\\OrganizerRegistry.algo.ts:57","pc":[268]},{"teal":209,"source":"contracts\\OrganizerRegistry.algo.ts:57","pc":[269]},{"teal":210,"source":"contracts\\OrganizerRegistry.algo.ts:57","pc":[270]},{"teal":211,"source":"contracts\\OrganizerRegistry.algo.ts:57","pc":[271]},{"teal":212,"source":"contracts\\OrganizerRegistry.algo.ts:57","pc":[272]},{"teal":213,"source":"contracts\\OrganizerRegistry.algo.ts:57","pc":[273]},{"teal":216,"source":"contracts\\OrganizerRegistry.algo.ts:49","pc":[274]},{"teal":221,"source":"contracts\\OrganizerRegistry.algo.ts:64","pc":[275,276]},{"teal":224,"source":"contracts\\OrganizerRegistry.algo.ts:64","pc":[277,278,279]},{"teal":225,"source":"contracts\\OrganizerRegistry.algo.ts:64","pc":[280]},{"teal":226,"source":"contracts\\OrganizerRegistry.algo.ts:64","pc":[281]},{"teal":227,"source":"contracts\\OrganizerRegistry.algo.ts:64","pc":[282]},{"teal":228,"source":"contracts\\OrganizerRegistry.algo.ts:64","pc":[283]},{"teal":231,"source":"contracts\\OrganizerRegistry.algo.ts:64","errorMessage":"argument 0 (account) for checkAuthorization must be a address","pc":[284]},{"teal":234,"source":"contracts\\OrganizerRegistry.algo.ts:64","pc":[285,286,287]},{"teal":235,"source":"contracts\\OrganizerRegistry.algo.ts:64","pc":[288]},{"teal":236,"source":"contracts\\OrganizerRegistry.algo.ts:64","pc":[289]},{"teal":237,"source":"contracts\\OrganizerRegistry.algo.ts:64","pc":[290]},{"teal":238,"source":"contracts\\OrganizerRegistry.algo.ts:64","pc":[291]},{"teal":239,"source":"contracts\\OrganizerRegistry.algo.ts:64","pc":[292]},{"teal":245,"source":"contracts\\OrganizerRegistry.algo.ts:64","pc":[293,294,295]},{"teal":250,"source":"contracts\\OrganizerRegistry.algo.ts:65","pc":[296,297]},{"teal":251,"source":"contracts\\OrganizerRegistry.algo.ts:65","pc":[298,299,300]},{"teal":252,"source":"contracts\\OrganizerRegistry.algo.ts:65","pc":[301]},{"teal":253,"source":"contracts\\OrganizerRegistry.algo.ts:65","pc":[302]},{"teal":254,"source":"contracts\\OrganizerRegistry.algo.ts:65","pc":[303]},{"teal":255,"source":"contracts\\OrganizerRegistry.algo.ts:65","pc":[304]},{"teal":256,"source":"contracts\\OrganizerRegistry.algo.ts:65","pc":[305,306,307]},{"teal":261,"source":"contracts\\OrganizerRegistry.algo.ts:66","pc":[308,309]},{"teal":262,"source":"contracts\\OrganizerRegistry.algo.ts:66","pc":[310]},{"teal":263,"source":"contracts\\OrganizerRegistry.algo.ts:66","pc":[311]},{"teal":264,"source":"contracts\\OrganizerRegistry.algo.ts:66","pc":[312]},{"teal":269,"source":"contracts\\OrganizerRegistry.algo.ts:68","pc":[313]},{"teal":270,"source":"contracts\\OrganizerRegistry.algo.ts:64","pc":[314]},{"teal":275,"source":"contracts\\OrganizerRegistry.algo.ts:74","pc":[315,316,317]},{"teal":276,"source":"contracts\\OrganizerRegistry.algo.ts:74","pc":[318]},{"teal":279,"source":"contracts\\OrganizerRegistry.algo.ts:74","pc":[319,320,321]},{"teal":280,"source":"contracts\\OrganizerRegistry.algo.ts:74","pc":[322]},{"teal":281,"source":"contracts\\OrganizerRegistry.algo.ts:74","pc":[323]},{"teal":282,"source":"contracts\\OrganizerRegistry.algo.ts:74","pc":[324]},{"teal":283,"source":"contracts\\OrganizerRegistry.algo.ts:74","pc":[325]},{"teal":286,"source":"contracts\\OrganizerRegistry.algo.ts:74","errorMessage":"argument 1 (organizer) for updateOrganizerStats must be a address","pc":[326]},{"teal":289,"source":"contracts\\OrganizerRegistry.algo.ts:74","pc":[327,328,329]},{"teal":290,"source":"contracts\\OrganizerRegistry.algo.ts:74","pc":[330]},{"teal":291,"source":"contracts\\OrganizerRegistry.algo.ts:74","pc":[331]},{"teal":297,"source":"contracts\\OrganizerRegistry.algo.ts:74","pc":[332,333,334]},{"teal":300,"source":"contracts\\OrganizerRegistry.algo.ts:74","pc":[335,336]},{"teal":304,"source":"contracts\\OrganizerRegistry.algo.ts:75","pc":[337,338]},{"teal":305,"source":"contracts\\OrganizerRegistry.algo.ts:75","pc":[339]},{"teal":306,"source":"contracts\\OrganizerRegistry.algo.ts:75","pc":[340]},{"teal":307,"source":"contracts\\OrganizerRegistry.algo.ts:75","pc":[341]},{"teal":308,"source":"contracts\\OrganizerRegistry.algo.ts:75","pc":[342]},{"teal":311,"source":"contracts\\OrganizerRegistry.algo.ts:75","errorMessage":"Account not authorized","pc":[343]},{"teal":315,"source":"contracts\\OrganizerRegistry.algo.ts:76","pc":[344,345]},{"teal":316,"source":"contracts\\OrganizerRegistry.algo.ts:76","pc":[346,347,348]},{"teal":317,"source":"contracts\\OrganizerRegistry.algo.ts:76","pc":[349]},{"teal":318,"source":"contracts\\OrganizerRegistry.algo.ts:76","pc":[350]},{"teal":319,"source":"contracts\\OrganizerRegistry.algo.ts:76","pc":[351]},{"teal":320,"source":"contracts\\OrganizerRegistry.algo.ts:76","pc":[352]},{"teal":323,"source":"contracts\\OrganizerRegistry.algo.ts:76","errorMessage":"Organizer must opt-in first","pc":[353]},{"teal":327,"source":"contracts\\OrganizerRegistry.algo.ts:79","pc":[354,355]},{"teal":328,"source":"contracts\\OrganizerRegistry.algo.ts:79","pc":[356]},{"teal":329,"source":"contracts\\OrganizerRegistry.algo.ts:79","pc":[357,358]},{"teal":330,"source":"contracts\\OrganizerRegistry.algo.ts:79","pc":[359]},{"teal":331,"source":"contracts\\OrganizerRegistry.algo.ts:79","pc":[360]},{"teal":332,"source":"contracts\\OrganizerRegistry.algo.ts:79","pc":[361,362]},{"teal":333,"source":"contracts\\OrganizerRegistry.algo.ts:79","pc":[363]},{"teal":334,"source":"contracts\\OrganizerRegistry.algo.ts:79","pc":[364]},{"teal":338,"source":"contracts\\OrganizerRegistry.algo.ts:82","pc":[365,366]},{"teal":339,"source":"contracts\\OrganizerRegistry.algo.ts:82","pc":[367]},{"teal":340,"source":"contracts\\OrganizerRegistry.algo.ts:82","pc":[368]},{"teal":341,"source":"contracts\\OrganizerRegistry.algo.ts:82","pc":[369,370]},{"teal":345,"source":"contracts\\OrganizerRegistry.algo.ts:83","pc":[371,372]},{"teal":346,"source":"contracts\\OrganizerRegistry.algo.ts:83","pc":[373]},{"teal":347,"source":"contracts\\OrganizerRegistry.algo.ts:83","pc":[374,375]},{"teal":348,"source":"contracts\\OrganizerRegistry.algo.ts:83","pc":[376,377]},{"teal":349,"source":"contracts\\OrganizerRegistry.algo.ts:83","pc":[378,379]},{"teal":350,"source":"contracts\\OrganizerRegistry.algo.ts:83","pc":[380]},{"teal":351,"source":"contracts\\OrganizerRegistry.algo.ts:83","pc":[381]},{"teal":352,"source":"contracts\\OrganizerRegistry.algo.ts:83","pc":[382]},{"teal":356,"source":"contracts\\OrganizerRegistry.algo.ts:86","pc":[383,384]},{"teal":357,"source":"contracts\\OrganizerRegistry.algo.ts:86","pc":[385]},{"teal":358,"source":"contracts\\OrganizerRegistry.algo.ts:86","pc":[386]},{"teal":359,"source":"contracts\\OrganizerRegistry.algo.ts:86","pc":[387,388]},{"teal":360,"source":"contracts\\OrganizerRegistry.algo.ts:86","pc":[389]},{"teal":361,"source":"contracts\\OrganizerRegistry.algo.ts:86","pc":[390]},{"teal":362,"source":"contracts\\OrganizerRegistry.algo.ts:74","pc":[391]},{"teal":367,"source":"contracts\\OrganizerRegistry.algo.ts:92","pc":[392,393]},{"teal":370,"source":"contracts\\OrganizerRegistry.algo.ts:92","pc":[394,395,396]},{"teal":371,"source":"contracts\\OrganizerRegistry.algo.ts:92","pc":[397]},{"teal":372,"source":"contracts\\OrganizerRegistry.algo.ts:92","pc":[398]},{"teal":373,"source":"contracts\\OrganizerRegistry.algo.ts:92","pc":[399]},{"teal":374,"source":"contracts\\OrganizerRegistry.algo.ts:92","pc":[400]},{"teal":377,"source":"contracts\\OrganizerRegistry.algo.ts:92","errorMessage":"argument 0 (account) for getOrganizerInfo must be a address","pc":[401]},{"teal":380,"source":"contracts\\OrganizerRegistry.algo.ts:92","pc":[402,403,404]},{"teal":381,"source":"contracts\\OrganizerRegistry.algo.ts:92","pc":[405]},{"teal":382,"source":"contracts\\OrganizerRegistry.algo.ts:92","pc":[406]},{"teal":383,"source":"contracts\\OrganizerRegistry.algo.ts:92","pc":[407]},{"teal":384,"source":"contracts\\OrganizerRegistry.algo.ts:92","pc":[408]},{"teal":390,"source":"contracts\\OrganizerRegistry.algo.ts:92","pc":[409,410,411]},{"teal":395,"source":"contracts\\OrganizerRegistry.algo.ts:93","pc":[412,413]},{"teal":396,"source":"contracts\\OrganizerRegistry.algo.ts:93","pc":[414,415,416]},{"teal":397,"source":"contracts\\OrganizerRegistry.algo.ts:93","pc":[417]},{"teal":398,"source":"contracts\\OrganizerRegistry.algo.ts:93","pc":[418]},{"teal":399,"source":"contracts\\OrganizerRegistry.algo.ts:93","pc":[419]},{"teal":400,"source":"contracts\\OrganizerRegistry.algo.ts:93","pc":[420]},{"teal":401,"source":"contracts\\OrganizerRegistry.algo.ts:93","pc":[421]},{"teal":402,"source":"contracts\\OrganizerRegistry.algo.ts:93","pc":[422,423,424]},{"teal":407,"source":"contracts\\OrganizerRegistry.algo.ts:94","pc":[425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450]},{"teal":408,"source":"contracts\\OrganizerRegistry.algo.ts:94","pc":[451]},{"teal":417,"source":"contracts\\OrganizerRegistry.algo.ts:98","pc":[452,453]},{"teal":418,"source":"contracts\\OrganizerRegistry.algo.ts:98","pc":[454]},{"teal":419,"source":"contracts\\OrganizerRegistry.algo.ts:98","pc":[455]},{"teal":420,"source":"contracts\\OrganizerRegistry.algo.ts:98","pc":[456]},{"teal":421,"source":"contracts\\OrganizerRegistry.algo.ts:99","pc":[457,458]},{"teal":422,"source":"contracts\\OrganizerRegistry.algo.ts:99","pc":[459]},{"teal":423,"source":"contracts\\OrganizerRegistry.algo.ts:99","pc":[460]},{"teal":424,"source":"contracts\\OrganizerRegistry.algo.ts:99","pc":[461]},{"teal":425,"source":"contracts\\OrganizerRegistry.algo.ts:99","pc":[462]},{"teal":426,"source":"contracts\\OrganizerRegistry.algo.ts:100","pc":[463,464]},{"teal":427,"source":"contracts\\OrganizerRegistry.algo.ts:100","pc":[465]},{"teal":428,"source":"contracts\\OrganizerRegistry.algo.ts:100","pc":[466]},{"teal":429,"source":"contracts\\OrganizerRegistry.algo.ts:100","pc":[467]},{"teal":430,"source":"contracts\\OrganizerRegistry.algo.ts:100","pc":[468]},{"teal":431,"source":"contracts\\OrganizerRegistry.algo.ts:92","pc":[469]},{"teal":436,"source":"contracts\\OrganizerRegistry.algo.ts:107","pc":[470,471,472]},{"teal":437,"source":"contracts\\OrganizerRegistry.algo.ts:107","pc":[473]},{"teal":438,"source":"contracts\\OrganizerRegistry.algo.ts:107","pc":[474]},{"teal":444,"source":"contracts\\OrganizerRegistry.algo.ts:107","pc":[475,476,477]},{"teal":448,"source":"contracts\\OrganizerRegistry.algo.ts:109","pc":[478,479]},{"teal":449,"source":"contracts\\OrganizerRegistry.algo.ts:109","pc":[480]},{"teal":450,"source":"contracts\\OrganizerRegistry.algo.ts:109","pc":[481]},{"teal":451,"source":"contracts\\OrganizerRegistry.algo.ts:109","pc":[482]},{"teal":455,"source":"contracts\\OrganizerRegistry.algo.ts:110","pc":[483,484]},{"teal":456,"source":"contracts\\OrganizerRegistry.algo.ts:110","pc":[485]},{"teal":457,"source":"contracts\\OrganizerRegistry.algo.ts:110","pc":[486]},{"teal":458,"source":"contracts\\OrganizerRegistry.algo.ts:110","pc":[487]},{"teal":462,"source":"contracts\\OrganizerRegistry.algo.ts:111","pc":[488,489]},{"teal":463,"source":"contracts\\OrganizerRegistry.algo.ts:111","pc":[490]},{"teal":464,"source":"contracts\\OrganizerRegistry.algo.ts:111","pc":[491]},{"teal":465,"source":"contracts\\OrganizerRegistry.algo.ts:111","pc":[492]},{"teal":466,"source":"contracts\\OrganizerRegistry.algo.ts:107","pc":[493]},{"teal":469,"source":"contracts\\OrganizerRegistry.algo.ts:10","pc":[494,495,496,497,498,499]},{"teal":470,"source":"contracts\\OrganizerRegistry.algo.ts:10","pc":[500,501,502]},{"teal":471,"source":"contracts\\OrganizerRegistry.algo.ts:10","pc":[503,504,505,506]},{"teal":474,"source":"contracts\\OrganizerRegistry.algo.ts:10","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[507]},{"teal":477,"source":"contracts\\OrganizerRegistry.algo.ts:10","pc":[508,509,510,511,512,513]},{"teal":478,"source":"contracts\\OrganizerRegistry.algo.ts:10","pc":[514,515,516,517,518,519]},{"teal":479,"source":"contracts\\OrganizerRegistry.algo.ts:10","pc":[520,521,522,523,524,525]},{"teal":480,"source":"contracts\\OrganizerRegistry.algo.ts:10","pc":[526,527,528,529,530,531]},{"teal":481,"source":"contracts\\OrganizerRegistry.algo.ts:10","pc":[532,533,534,535,536,537]},{"teal":482,"source":"contracts\\OrganizerRegistry.algo.ts:10","pc":[538,539,540,541,542,543]},{"teal":483,"source":"contracts\\OrganizerRegistry.algo.ts:10","pc":[544,545,546]},{"teal":484,"source":"contracts\\OrganizerRegistry.algo.ts:10","pc":[547,548,549,550,551,552,553,554,555,556,557,558,559,560]},{"teal":487,"source":"contracts\\OrganizerRegistry.algo.ts:10","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[561]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiADAQAgJggKYXV0aG9yaXplZBZjb250cmlidXRpb25zX3ZlcmlmaWVkEHRvdGFsX29yZ2FuaXplcnMKcmVwdXRhdGlvbhN0b3RhbF9jb250cmlidXRpb25zBW93bmVyBBUffHUAMRgUgQYLMRkIjQwBcwAAAAAAAAAAAAABZQAAAAAAAAAAAAAAiAACIkOKAAAnBTEAZyojZycEI2eJNhoBSRUkEkSIAAIiQ4oBADEAJwVkEkSL/zYyAChjTEhEi/8oImaL/yuBZGaL/ykjZipJZCIIZ4k2GgFJFSQSRIgAAiJDigEAJwcxACcFZBJEi/82MgAoY0xIRIv/KGKMAIv/KCNmiwAiEkEABipJZCIJZ4knBjYaAUkVJBJEiAAFFlCwIkOKAQGL/zYyAChjTEhBAAWL/yhiiSOJNhoCFzYaAUkVJBJEiAACIkOKAgAnB4v/KGIiEkSL/zYyAChjTEhEi/8pi/8pYov+CGaL/ytijACL/yuLAIv+gQoLCGYnBElki/4IZ4knBjYaAUkVJBJEiAAEULAiQ4oBAYv/NjIAKGNMSBRBABuAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAImL/yhiFov/K2IWUIv/KWIWUImIAAIiQ4oAADEAKCNmMQArI2YxACkjZomABLhEezY2GgCOAf6PAIAEc7xlAYAEKpU2HoAEn4rkj4AE/oq28oAEv3N4a4AEKTFNlTYaAI4G/m7+pv7i/wr/V/+lAA==","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":3,"patch":0,"commitHash":"3e5d694b+"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the OrganizerRegistry contract
 */
export type OrganizerRegistryArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'authorize(address)void': {
      account: string
    }
    'deauthorize(address)void': {
      account: string
    }
    'checkAuthorization(address)uint64': {
      account: string
    }
    'updateOrganizerStats(address,uint64)void': {
      organizer: string
      contributionsCount: bigint | number
    }
    'getOrganizerInfo(address)(uint64,uint64,uint64)': {
      account: string
    }
    'optIn()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'authorize(address)void': [account: string]
    'deauthorize(address)void': [account: string]
    'checkAuthorization(address)uint64': [account: string]
    'updateOrganizerStats(address,uint64)void': [organizer: string, contributionsCount: bigint | number]
    'getOrganizerInfo(address)(uint64,uint64,uint64)': [account: string]
    'optIn()void': []
  }
}

/**
 * The return type for each method
 */
export type OrganizerRegistryReturns = {
  'createApplication()void': void
  'authorize(address)void': void
  'deauthorize(address)void': void
  'checkAuthorization(address)uint64': bigint
  'updateOrganizerStats(address,uint64)void': void
  'getOrganizerInfo(address)(uint64,uint64,uint64)': [bigint, bigint, bigint]
  'optIn()void': void
}

/**
 * Defines the types of available calls and state of the OrganizerRegistry smart contract.
 */
export type OrganizerRegistryTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: OrganizerRegistryArgs['obj']['createApplication()void']
      argsTuple: OrganizerRegistryArgs['tuple']['createApplication()void']
      returns: OrganizerRegistryReturns['createApplication()void']
    }>
    & Record<'authorize(address)void' | 'authorize', {
      argsObj: OrganizerRegistryArgs['obj']['authorize(address)void']
      argsTuple: OrganizerRegistryArgs['tuple']['authorize(address)void']
      returns: OrganizerRegistryReturns['authorize(address)void']
    }>
    & Record<'deauthorize(address)void' | 'deauthorize', {
      argsObj: OrganizerRegistryArgs['obj']['deauthorize(address)void']
      argsTuple: OrganizerRegistryArgs['tuple']['deauthorize(address)void']
      returns: OrganizerRegistryReturns['deauthorize(address)void']
    }>
    & Record<'checkAuthorization(address)uint64' | 'checkAuthorization', {
      argsObj: OrganizerRegistryArgs['obj']['checkAuthorization(address)uint64']
      argsTuple: OrganizerRegistryArgs['tuple']['checkAuthorization(address)uint64']
      returns: OrganizerRegistryReturns['checkAuthorization(address)uint64']
    }>
    & Record<'updateOrganizerStats(address,uint64)void' | 'updateOrganizerStats', {
      argsObj: OrganizerRegistryArgs['obj']['updateOrganizerStats(address,uint64)void']
      argsTuple: OrganizerRegistryArgs['tuple']['updateOrganizerStats(address,uint64)void']
      returns: OrganizerRegistryReturns['updateOrganizerStats(address,uint64)void']
    }>
    & Record<'getOrganizerInfo(address)(uint64,uint64,uint64)' | 'getOrganizerInfo', {
      argsObj: OrganizerRegistryArgs['obj']['getOrganizerInfo(address)(uint64,uint64,uint64)']
      argsTuple: OrganizerRegistryArgs['tuple']['getOrganizerInfo(address)(uint64,uint64,uint64)']
      returns: OrganizerRegistryReturns['getOrganizerInfo(address)(uint64,uint64,uint64)']
    }>
    & Record<'optIn()void' | 'optIn', {
      argsObj: OrganizerRegistryArgs['obj']['optIn()void']
      argsTuple: OrganizerRegistryArgs['tuple']['optIn()void']
      returns: OrganizerRegistryReturns['optIn()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        owner: string
        totalOrganizers: bigint
        totalContributions: bigint
      }
      maps: {}
    }
    local: {
      keys: {
        authorized: bigint
        reputation: bigint
        contributionsVerified: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type OrganizerRegistrySignatures = keyof OrganizerRegistryTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type OrganizerRegistryNonVoidMethodSignatures = keyof OrganizerRegistryTypes['methods'] extends infer T ? T extends keyof OrganizerRegistryTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the OrganizerRegistry smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends OrganizerRegistrySignatures> = OrganizerRegistryTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the OrganizerRegistry smart contract to the method's return type
 */
export type MethodReturn<TSignature extends OrganizerRegistrySignatures> = OrganizerRegistryTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = OrganizerRegistryTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = OrganizerRegistryTypes['state']['local']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type OrganizerRegistryCreateCallParams =
  | Expand<CallParams<OrganizerRegistryArgs['obj']['createApplication()void'] | OrganizerRegistryArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<OrganizerRegistryArgs['obj']['createApplication()void'] | OrganizerRegistryArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type OrganizerRegistryDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: OrganizerRegistryCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the OrganizerRegistry smart contract
 */
export abstract class OrganizerRegistryParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends OrganizerRegistryCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return OrganizerRegistryParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the OrganizerRegistry smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<OrganizerRegistryArgs['obj']['createApplication()void'] | OrganizerRegistryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the authorize(address)void ABI method
   *
   * Authorize an organizer (only owner can call)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static authorize(params: CallParams<OrganizerRegistryArgs['obj']['authorize(address)void'] | OrganizerRegistryArgs['tuple']['authorize(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'authorize(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.account],
    }
  }
  /**
   * Constructs a no op call for the deauthorize(address)void ABI method
   *
   * Deauthorize an organizer (only owner can call)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static deauthorize(params: CallParams<OrganizerRegistryArgs['obj']['deauthorize(address)void'] | OrganizerRegistryArgs['tuple']['deauthorize(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'deauthorize(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.account],
    }
  }
  /**
   * Constructs a no op call for the checkAuthorization(address)uint64 ABI method
   *
   * Check if an account is authorized (public method)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static checkAuthorization(params: CallParams<OrganizerRegistryArgs['obj']['checkAuthorization(address)uint64'] | OrganizerRegistryArgs['tuple']['checkAuthorization(address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'checkAuthorization(address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.account],
    }
  }
  /**
   * Constructs a no op call for the updateOrganizerStats(address,uint64)void ABI method
   *
   * Update organizer stats after verifying contributions
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateOrganizerStats(params: CallParams<OrganizerRegistryArgs['obj']['updateOrganizerStats(address,uint64)void'] | OrganizerRegistryArgs['tuple']['updateOrganizerStats(address,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateOrganizerStats(address,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.organizer, params.args.contributionsCount],
    }
  }
  /**
   * Constructs a no op call for the getOrganizerInfo(address)(uint64,uint64,uint64) ABI method
   *
   * Get organizer information
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getOrganizerInfo(params: CallParams<OrganizerRegistryArgs['obj']['getOrganizerInfo(address)(uint64,uint64,uint64)'] | OrganizerRegistryArgs['tuple']['getOrganizerInfo(address)(uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getOrganizerInfo(address)(uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.account],
    }
  }
  /**
   * Constructs a no op call for the optIn()void ABI method
   *
   * Opt into the contract (required before authorization)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optIn(params: CallParams<OrganizerRegistryArgs['obj']['optIn()void'] | OrganizerRegistryArgs['tuple']['optIn()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'optIn()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the OrganizerRegistry smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class OrganizerRegistryFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `OrganizerRegistryFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new OrganizerRegistryClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new OrganizerRegistryClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the OrganizerRegistry smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: OrganizerRegistryDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? OrganizerRegistryParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (OrganizerRegistryCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new OrganizerRegistryClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the OrganizerRegistry smart contract using the createApplication()void ABI method.
       *
       * Initialize contract on deployment
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<OrganizerRegistryArgs['obj']['createApplication()void'] | OrganizerRegistryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(OrganizerRegistryParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the OrganizerRegistry smart contract using the createApplication()void ABI method.
       *
       * Initialize contract on deployment
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<OrganizerRegistryArgs['obj']['createApplication()void'] | OrganizerRegistryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(OrganizerRegistryParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the OrganizerRegistry smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * Initialize contract on deployment
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<OrganizerRegistryArgs['obj']['createApplication()void'] | OrganizerRegistryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(OrganizerRegistryParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | OrganizerRegistryReturns['createApplication()void']) }, appClient: new OrganizerRegistryClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the OrganizerRegistry smart contract
 */
export class OrganizerRegistryClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `OrganizerRegistryClient`
   *
   * @param appClient An `AppClient` instance which has been created with the OrganizerRegistry app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `OrganizerRegistryClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends OrganizerRegistryNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `OrganizerRegistryClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<OrganizerRegistryClient> {
    return new OrganizerRegistryClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `OrganizerRegistryClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<OrganizerRegistryClient> {
    return new OrganizerRegistryClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the OrganizerRegistry smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the OrganizerRegistry smart contract using the `authorize(address)void` ABI method.
     *
     * Authorize an organizer (only owner can call)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    authorize: (params: CallParams<OrganizerRegistryArgs['obj']['authorize(address)void'] | OrganizerRegistryArgs['tuple']['authorize(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrganizerRegistryParamsFactory.authorize(params))
    },

    /**
     * Makes a call to the OrganizerRegistry smart contract using the `deauthorize(address)void` ABI method.
     *
     * Deauthorize an organizer (only owner can call)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    deauthorize: (params: CallParams<OrganizerRegistryArgs['obj']['deauthorize(address)void'] | OrganizerRegistryArgs['tuple']['deauthorize(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrganizerRegistryParamsFactory.deauthorize(params))
    },

    /**
     * Makes a call to the OrganizerRegistry smart contract using the `checkAuthorization(address)uint64` ABI method.
     *
     * Check if an account is authorized (public method)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    checkAuthorization: (params: CallParams<OrganizerRegistryArgs['obj']['checkAuthorization(address)uint64'] | OrganizerRegistryArgs['tuple']['checkAuthorization(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrganizerRegistryParamsFactory.checkAuthorization(params))
    },

    /**
     * Makes a call to the OrganizerRegistry smart contract using the `updateOrganizerStats(address,uint64)void` ABI method.
     *
     * Update organizer stats after verifying contributions
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateOrganizerStats: (params: CallParams<OrganizerRegistryArgs['obj']['updateOrganizerStats(address,uint64)void'] | OrganizerRegistryArgs['tuple']['updateOrganizerStats(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrganizerRegistryParamsFactory.updateOrganizerStats(params))
    },

    /**
     * Makes a call to the OrganizerRegistry smart contract using the `getOrganizerInfo(address)(uint64,uint64,uint64)` ABI method.
     *
     * Get organizer information
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getOrganizerInfo: (params: CallParams<OrganizerRegistryArgs['obj']['getOrganizerInfo(address)(uint64,uint64,uint64)'] | OrganizerRegistryArgs['tuple']['getOrganizerInfo(address)(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrganizerRegistryParamsFactory.getOrganizerInfo(params))
    },

    /**
     * Makes a call to the OrganizerRegistry smart contract using the `optIn()void` ABI method.
     *
     * Opt into the contract (required before authorization)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optIn: (params: CallParams<OrganizerRegistryArgs['obj']['optIn()void'] | OrganizerRegistryArgs['tuple']['optIn()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(OrganizerRegistryParamsFactory.optIn(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the OrganizerRegistry smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the OrganizerRegistry smart contract using the `authorize(address)void` ABI method.
     *
     * Authorize an organizer (only owner can call)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    authorize: (params: CallParams<OrganizerRegistryArgs['obj']['authorize(address)void'] | OrganizerRegistryArgs['tuple']['authorize(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrganizerRegistryParamsFactory.authorize(params))
    },

    /**
     * Makes a call to the OrganizerRegistry smart contract using the `deauthorize(address)void` ABI method.
     *
     * Deauthorize an organizer (only owner can call)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    deauthorize: (params: CallParams<OrganizerRegistryArgs['obj']['deauthorize(address)void'] | OrganizerRegistryArgs['tuple']['deauthorize(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrganizerRegistryParamsFactory.deauthorize(params))
    },

    /**
     * Makes a call to the OrganizerRegistry smart contract using the `checkAuthorization(address)uint64` ABI method.
     *
     * Check if an account is authorized (public method)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    checkAuthorization: (params: CallParams<OrganizerRegistryArgs['obj']['checkAuthorization(address)uint64'] | OrganizerRegistryArgs['tuple']['checkAuthorization(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrganizerRegistryParamsFactory.checkAuthorization(params))
    },

    /**
     * Makes a call to the OrganizerRegistry smart contract using the `updateOrganizerStats(address,uint64)void` ABI method.
     *
     * Update organizer stats after verifying contributions
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateOrganizerStats: (params: CallParams<OrganizerRegistryArgs['obj']['updateOrganizerStats(address,uint64)void'] | OrganizerRegistryArgs['tuple']['updateOrganizerStats(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrganizerRegistryParamsFactory.updateOrganizerStats(params))
    },

    /**
     * Makes a call to the OrganizerRegistry smart contract using the `getOrganizerInfo(address)(uint64,uint64,uint64)` ABI method.
     *
     * Get organizer information
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getOrganizerInfo: (params: CallParams<OrganizerRegistryArgs['obj']['getOrganizerInfo(address)(uint64,uint64,uint64)'] | OrganizerRegistryArgs['tuple']['getOrganizerInfo(address)(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrganizerRegistryParamsFactory.getOrganizerInfo(params))
    },

    /**
     * Makes a call to the OrganizerRegistry smart contract using the `optIn()void` ABI method.
     *
     * Opt into the contract (required before authorization)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optIn: (params: CallParams<OrganizerRegistryArgs['obj']['optIn()void'] | OrganizerRegistryArgs['tuple']['optIn()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(OrganizerRegistryParamsFactory.optIn(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the OrganizerRegistry smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the OrganizerRegistry smart contract using the `authorize(address)void` ABI method.
     *
     * Authorize an organizer (only owner can call)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    authorize: async (params: CallParams<OrganizerRegistryArgs['obj']['authorize(address)void'] | OrganizerRegistryArgs['tuple']['authorize(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrganizerRegistryParamsFactory.authorize(params))
      return {...result, return: result.return as unknown as (undefined | OrganizerRegistryReturns['authorize(address)void'])}
    },

    /**
     * Makes a call to the OrganizerRegistry smart contract using the `deauthorize(address)void` ABI method.
     *
     * Deauthorize an organizer (only owner can call)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    deauthorize: async (params: CallParams<OrganizerRegistryArgs['obj']['deauthorize(address)void'] | OrganizerRegistryArgs['tuple']['deauthorize(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrganizerRegistryParamsFactory.deauthorize(params))
      return {...result, return: result.return as unknown as (undefined | OrganizerRegistryReturns['deauthorize(address)void'])}
    },

    /**
     * Makes a call to the OrganizerRegistry smart contract using the `checkAuthorization(address)uint64` ABI method.
     *
     * Check if an account is authorized (public method)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    checkAuthorization: async (params: CallParams<OrganizerRegistryArgs['obj']['checkAuthorization(address)uint64'] | OrganizerRegistryArgs['tuple']['checkAuthorization(address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrganizerRegistryParamsFactory.checkAuthorization(params))
      return {...result, return: result.return as unknown as (undefined | OrganizerRegistryReturns['checkAuthorization(address)uint64'])}
    },

    /**
     * Makes a call to the OrganizerRegistry smart contract using the `updateOrganizerStats(address,uint64)void` ABI method.
     *
     * Update organizer stats after verifying contributions
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateOrganizerStats: async (params: CallParams<OrganizerRegistryArgs['obj']['updateOrganizerStats(address,uint64)void'] | OrganizerRegistryArgs['tuple']['updateOrganizerStats(address,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrganizerRegistryParamsFactory.updateOrganizerStats(params))
      return {...result, return: result.return as unknown as (undefined | OrganizerRegistryReturns['updateOrganizerStats(address,uint64)void'])}
    },

    /**
     * Makes a call to the OrganizerRegistry smart contract using the `getOrganizerInfo(address)(uint64,uint64,uint64)` ABI method.
     *
     * Get organizer information
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getOrganizerInfo: async (params: CallParams<OrganizerRegistryArgs['obj']['getOrganizerInfo(address)(uint64,uint64,uint64)'] | OrganizerRegistryArgs['tuple']['getOrganizerInfo(address)(uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrganizerRegistryParamsFactory.getOrganizerInfo(params))
      return {...result, return: result.return as unknown as (undefined | OrganizerRegistryReturns['getOrganizerInfo(address)(uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the OrganizerRegistry smart contract using the `optIn()void` ABI method.
     *
     * Opt into the contract (required before authorization)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optIn: async (params: CallParams<OrganizerRegistryArgs['obj']['optIn()void'] | OrganizerRegistryArgs['tuple']['optIn()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(OrganizerRegistryParamsFactory.optIn(params))
      return {...result, return: result.return as unknown as (undefined | OrganizerRegistryReturns['optIn()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new OrganizerRegistryClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current OrganizerRegistry app
   */
  state = {
    /**
     * Methods to access global state for the current OrganizerRegistry app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          owner: result.owner,
          totalOrganizers: result.totalOrganizers,
          totalContributions: result.totalContributions,
        }
      },
      /**
       * Get the current value of the owner key in global state
       */
      owner: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("owner")) as string | undefined },
      /**
       * Get the current value of the totalOrganizers key in global state
       */
      totalOrganizers: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalOrganizers")) as bigint | undefined },
      /**
       * Get the current value of the totalContributions key in global state
       */
      totalContributions: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalContributions")) as bigint | undefined },
    },
    /**
     * Methods to access local state for the current OrganizerRegistry app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            authorized: result.authorized,
            reputation: result.reputation,
            contributionsVerified: result.contributionsVerified,
          }
        },
        /**
         * Get the current value of the authorized key in local state
         */
        authorized: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("authorized")) as bigint | undefined },
        /**
         * Get the current value of the reputation key in local state
         */
        reputation: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("reputation")) as bigint | undefined },
        /**
         * Get the current value of the contributionsVerified key in local state
         */
        contributionsVerified: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("contributionsVerified")) as bigint | undefined },
      }
    },
  }

  public newGroup(): OrganizerRegistryComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a authorize(address)void method call against the OrganizerRegistry contract
       */
      authorize(params: CallParams<OrganizerRegistryArgs['obj']['authorize(address)void'] | OrganizerRegistryArgs['tuple']['authorize(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.authorize(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a deauthorize(address)void method call against the OrganizerRegistry contract
       */
      deauthorize(params: CallParams<OrganizerRegistryArgs['obj']['deauthorize(address)void'] | OrganizerRegistryArgs['tuple']['deauthorize(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.deauthorize(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a checkAuthorization(address)uint64 method call against the OrganizerRegistry contract
       */
      checkAuthorization(params: CallParams<OrganizerRegistryArgs['obj']['checkAuthorization(address)uint64'] | OrganizerRegistryArgs['tuple']['checkAuthorization(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.checkAuthorization(params)))
        resultMappers.push((v) => client.decodeReturnValue('checkAuthorization(address)uint64', v))
        return this
      },
      /**
       * Add a updateOrganizerStats(address,uint64)void method call against the OrganizerRegistry contract
       */
      updateOrganizerStats(params: CallParams<OrganizerRegistryArgs['obj']['updateOrganizerStats(address,uint64)void'] | OrganizerRegistryArgs['tuple']['updateOrganizerStats(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateOrganizerStats(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getOrganizerInfo(address)(uint64,uint64,uint64) method call against the OrganizerRegistry contract
       */
      getOrganizerInfo(params: CallParams<OrganizerRegistryArgs['obj']['getOrganizerInfo(address)(uint64,uint64,uint64)'] | OrganizerRegistryArgs['tuple']['getOrganizerInfo(address)(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getOrganizerInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('getOrganizerInfo(address)(uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a optIn()void method call against the OrganizerRegistry contract
       */
      optIn(params: CallParams<OrganizerRegistryArgs['obj']['optIn()void'] | OrganizerRegistryArgs['tuple']['optIn()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optIn(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the OrganizerRegistry contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as OrganizerRegistryComposer
  }
}
export type OrganizerRegistryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the authorize(address)void ABI method.
   *
   * Authorize an organizer (only owner can call)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  authorize(params?: CallParams<OrganizerRegistryArgs['obj']['authorize(address)void'] | OrganizerRegistryArgs['tuple']['authorize(address)void']>): OrganizerRegistryComposer<[...TReturns, OrganizerRegistryReturns['authorize(address)void'] | undefined]>

  /**
   * Calls the deauthorize(address)void ABI method.
   *
   * Deauthorize an organizer (only owner can call)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deauthorize(params?: CallParams<OrganizerRegistryArgs['obj']['deauthorize(address)void'] | OrganizerRegistryArgs['tuple']['deauthorize(address)void']>): OrganizerRegistryComposer<[...TReturns, OrganizerRegistryReturns['deauthorize(address)void'] | undefined]>

  /**
   * Calls the checkAuthorization(address)uint64 ABI method.
   *
   * Check if an account is authorized (public method)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  checkAuthorization(params?: CallParams<OrganizerRegistryArgs['obj']['checkAuthorization(address)uint64'] | OrganizerRegistryArgs['tuple']['checkAuthorization(address)uint64']>): OrganizerRegistryComposer<[...TReturns, OrganizerRegistryReturns['checkAuthorization(address)uint64'] | undefined]>

  /**
   * Calls the updateOrganizerStats(address,uint64)void ABI method.
   *
   * Update organizer stats after verifying contributions
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateOrganizerStats(params?: CallParams<OrganizerRegistryArgs['obj']['updateOrganizerStats(address,uint64)void'] | OrganizerRegistryArgs['tuple']['updateOrganizerStats(address,uint64)void']>): OrganizerRegistryComposer<[...TReturns, OrganizerRegistryReturns['updateOrganizerStats(address,uint64)void'] | undefined]>

  /**
   * Calls the getOrganizerInfo(address)(uint64,uint64,uint64) ABI method.
   *
   * Get organizer information
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getOrganizerInfo(params?: CallParams<OrganizerRegistryArgs['obj']['getOrganizerInfo(address)(uint64,uint64,uint64)'] | OrganizerRegistryArgs['tuple']['getOrganizerInfo(address)(uint64,uint64,uint64)']>): OrganizerRegistryComposer<[...TReturns, OrganizerRegistryReturns['getOrganizerInfo(address)(uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the optIn()void ABI method.
   *
   * Opt into the contract (required before authorization)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optIn(params?: CallParams<OrganizerRegistryArgs['obj']['optIn()void'] | OrganizerRegistryArgs['tuple']['optIn()void']>): OrganizerRegistryComposer<[...TReturns, OrganizerRegistryReturns['optIn()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the OrganizerRegistry smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): OrganizerRegistryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): OrganizerRegistryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<OrganizerRegistryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<OrganizerRegistryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<OrganizerRegistryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<OrganizerRegistryComposerResults<TReturns>>
}
export type OrganizerRegistryComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

