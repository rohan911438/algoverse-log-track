/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"ContributionLogger","desc":"","methods":[{"name":"createApplication","desc":"Initialize the ContributionLogger contract","args":[{"name":"organizerRegistryAppId","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"logContribution","desc":"Log a contribution (called by authorized organizers)","args":[{"name":"volunteer","type":"address"},{"name":"contributionType","type":"string"},{"name":"hours","type":"uint64"},{"name":"description","type":"string"},{"name":"location","type":"string"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"verifyContribution","desc":"Verify a contribution exists and return details","args":[{"name":"contributionId","type":"uint64"}],"returns":{"type":"(uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getVolunteerStats","desc":"Get volunteer statistics","args":[{"name":"volunteer","type":"address"}],"returns":{"type":"(uint64,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]}},{"name":"bulkLogContributions","desc":"Bulk log contributions (for efficiency)","args":[{"name":"volunteers","type":"address[]"},{"name":"contributionType","type":"string"},{"name":"hours","type":"uint64[]"},{"name":"descriptions","type":"string[]"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"optIn","desc":"Opt in to start tracking contributions","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getContractStats","desc":"Get contract statistics","args":[],"returns":{"type":"(uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":0,"ints":3},"local":{"bytes":0,"ints":3}},"keys":{"global":{"organizerRegistryAppId":{"key":"b3JnYW5pemVyX3JlZ2lzdHJ5X2FwcA==","keyType":"AVMBytes","valueType":"uint64"},"totalContributions":{"key":"dG90YWxfY29udHJpYnV0aW9ucw==","keyType":"AVMBytes","valueType":"uint64"},"contributionCounter":{"key":"Y29udHJpYnV0aW9uX2NvdW50ZXI=","keyType":"AVMBytes","valueType":"uint64"}},"local":{"volunteerContributions":{"key":"dm9sdW50ZWVyX2NvbnRyaWJ1dGlvbnM=","keyType":"AVMBytes","valueType":"uint64"},"volunteerReputation":{"key":"dm9sdW50ZWVyX3JlcHV0YXRpb24=","keyType":"AVMBytes","valueType":"uint64"},"lastContributionTime":{"key":"bGFzdF9jb250cmlidXRpb25fdGltZQ==","keyType":"AVMBytes","valueType":"uint64"}},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\ContributionLogger.algo.ts:8","pc":[0]},{"teal":2,"source":"contracts\\ContributionLogger.algo.ts:8","pc":[1,2,3,4,5,6,7,8,9,10]},{"teal":3,"source":"contracts\\ContributionLogger.algo.ts:8","pc":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129]},{"teal":15,"source":"contracts\\ContributionLogger.algo.ts:8","pc":[130,131]},{"teal":16,"source":"contracts\\ContributionLogger.algo.ts:8","pc":[132]},{"teal":17,"source":"contracts\\ContributionLogger.algo.ts:8","pc":[133,134]},{"teal":18,"source":"contracts\\ContributionLogger.algo.ts:8","pc":[135]},{"teal":19,"source":"contracts\\ContributionLogger.algo.ts:8","pc":[136,137]},{"teal":20,"source":"contracts\\ContributionLogger.algo.ts:8","pc":[138]},{"teal":21,"source":"contracts\\ContributionLogger.algo.ts:8","pc":[139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164]},{"teal":25,"source":"contracts\\ContributionLogger.algo.ts:8","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[165]},{"teal":30,"source":"contracts\\ContributionLogger.algo.ts:22","pc":[166,167,168]},{"teal":31,"source":"contracts\\ContributionLogger.algo.ts:22","pc":[169]},{"teal":34,"source":"contracts\\ContributionLogger.algo.ts:22","pc":[170,171,172]},{"teal":35,"source":"contracts\\ContributionLogger.algo.ts:22","pc":[173]},{"teal":36,"source":"contracts\\ContributionLogger.algo.ts:22","pc":[174]},{"teal":42,"source":"contracts\\ContributionLogger.algo.ts:22","pc":[175,176,177]},{"teal":46,"source":"contracts\\ContributionLogger.algo.ts:23","pc":[178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201]},{"teal":47,"source":"contracts\\ContributionLogger.algo.ts:23","pc":[202,203]},{"teal":48,"source":"contracts\\ContributionLogger.algo.ts:23","pc":[204]},{"teal":52,"source":"contracts\\ContributionLogger.algo.ts:24","pc":[205,206]},{"teal":53,"source":"contracts\\ContributionLogger.algo.ts:24","pc":[207]},{"teal":54,"source":"contracts\\ContributionLogger.algo.ts:24","pc":[208]},{"teal":58,"source":"contracts\\ContributionLogger.algo.ts:25","pc":[209]},{"teal":59,"source":"contracts\\ContributionLogger.algo.ts:25","pc":[210]},{"teal":60,"source":"contracts\\ContributionLogger.algo.ts:25","pc":[211]},{"teal":61,"source":"contracts\\ContributionLogger.algo.ts:22","pc":[212]},{"teal":66,"source":"contracts\\ContributionLogger.algo.ts:31","pc":[213,214]},{"teal":69,"source":"contracts\\ContributionLogger.algo.ts:36","pc":[215,216,217]},{"teal":70,"source":"contracts\\ContributionLogger.algo.ts:36","pc":[218,219,220]},{"teal":73,"source":"contracts\\ContributionLogger.algo.ts:35","pc":[221,222,223]},{"teal":74,"source":"contracts\\ContributionLogger.algo.ts:35","pc":[224,225,226]},{"teal":77,"source":"contracts\\ContributionLogger.algo.ts:34","pc":[227,228,229]},{"teal":78,"source":"contracts\\ContributionLogger.algo.ts:34","pc":[230]},{"teal":81,"source":"contracts\\ContributionLogger.algo.ts:33","pc":[231,232,233]},{"teal":82,"source":"contracts\\ContributionLogger.algo.ts:33","pc":[234,235,236]},{"teal":85,"source":"contracts\\ContributionLogger.algo.ts:32","pc":[237,238,239]},{"teal":86,"source":"contracts\\ContributionLogger.algo.ts:32","pc":[240]},{"teal":87,"source":"contracts\\ContributionLogger.algo.ts:32","pc":[241]},{"teal":88,"source":"contracts\\ContributionLogger.algo.ts:32","pc":[242]},{"teal":89,"source":"contracts\\ContributionLogger.algo.ts:32","pc":[243]},{"teal":92,"source":"contracts\\ContributionLogger.algo.ts:32","errorMessage":"argument 4 (volunteer) for logContribution must be a address","pc":[244]},{"teal":95,"source":"contracts\\ContributionLogger.algo.ts:31","pc":[245,246,247]},{"teal":96,"source":"contracts\\ContributionLogger.algo.ts:31","pc":[248]},{"teal":97,"source":"contracts\\ContributionLogger.algo.ts:31","pc":[249]},{"teal":98,"source":"contracts\\ContributionLogger.algo.ts:31","pc":[250]},{"teal":99,"source":"contracts\\ContributionLogger.algo.ts:31","pc":[251]},{"teal":100,"source":"contracts\\ContributionLogger.algo.ts:31","pc":[252]},{"teal":106,"source":"contracts\\ContributionLogger.algo.ts:31","pc":[253,254,255]},{"teal":109,"source":"contracts\\ContributionLogger.algo.ts:31","pc":[256]},{"teal":110,"source":"contracts\\ContributionLogger.algo.ts:31","pc":[257,258]},{"teal":114,"source":"contracts\\ContributionLogger.algo.ts:42","pc":[259,260]},{"teal":115,"source":"contracts\\ContributionLogger.algo.ts:42","pc":[261]},{"teal":116,"source":"contracts\\ContributionLogger.algo.ts:42","pc":[262]},{"teal":117,"source":"contracts\\ContributionLogger.algo.ts:42","pc":[263]},{"teal":118,"source":"contracts\\ContributionLogger.algo.ts:42","pc":[264,265,266]},{"teal":119,"source":"contracts\\ContributionLogger.algo.ts:42","pc":[267,268]},{"teal":120,"source":"contracts\\ContributionLogger.algo.ts:42","pc":[269,270]},{"teal":121,"source":"contracts\\ContributionLogger.algo.ts:42","pc":[271]},{"teal":122,"source":"contracts\\ContributionLogger.algo.ts:42","pc":[272]},{"teal":126,"source":"contracts\\ContributionLogger.algo.ts:42","errorMessage":"Invalid hours: must be 1-24","pc":[273]},{"teal":130,"source":"contracts\\ContributionLogger.algo.ts:43","pc":[274,275]},{"teal":131,"source":"contracts\\ContributionLogger.algo.ts:43","pc":[276]},{"teal":132,"source":"contracts\\ContributionLogger.algo.ts:43","pc":[277]},{"teal":133,"source":"contracts\\ContributionLogger.algo.ts:43","pc":[278]},{"teal":134,"source":"contracts\\ContributionLogger.algo.ts:43","pc":[279]},{"teal":135,"source":"contracts\\ContributionLogger.algo.ts:43","pc":[280,281,282]},{"teal":136,"source":"contracts\\ContributionLogger.algo.ts:43","pc":[283,284]},{"teal":137,"source":"contracts\\ContributionLogger.algo.ts:43","pc":[285]},{"teal":138,"source":"contracts\\ContributionLogger.algo.ts:43","pc":[286]},{"teal":139,"source":"contracts\\ContributionLogger.algo.ts:43","pc":[287]},{"teal":140,"source":"contracts\\ContributionLogger.algo.ts:43","pc":[288]},{"teal":144,"source":"contracts\\ContributionLogger.algo.ts:43","errorMessage":"Invalid contribution type","pc":[289]},{"teal":148,"source":"contracts\\ContributionLogger.algo.ts:44","pc":[290,291]},{"teal":149,"source":"contracts\\ContributionLogger.algo.ts:44","pc":[292]},{"teal":150,"source":"contracts\\ContributionLogger.algo.ts:44","pc":[293,294,295]},{"teal":151,"source":"contracts\\ContributionLogger.algo.ts:44","pc":[296]},{"teal":154,"source":"contracts\\ContributionLogger.algo.ts:44","errorMessage":"Description too long","pc":[297]},{"teal":158,"source":"contracts\\ContributionLogger.algo.ts:45","pc":[298,299]},{"teal":159,"source":"contracts\\ContributionLogger.algo.ts:45","pc":[300]},{"teal":160,"source":"contracts\\ContributionLogger.algo.ts:45","pc":[301,302]},{"teal":161,"source":"contracts\\ContributionLogger.algo.ts:45","pc":[303]},{"teal":164,"source":"contracts\\ContributionLogger.algo.ts:45","errorMessage":"Location too long","pc":[304]},{"teal":169,"source":"contracts\\ContributionLogger.algo.ts:48","pc":[305,306]},{"teal":170,"source":"contracts\\ContributionLogger.algo.ts:48","pc":[307,308,309]},{"teal":171,"source":"contracts\\ContributionLogger.algo.ts:48","pc":[310]},{"teal":172,"source":"contracts\\ContributionLogger.algo.ts:48","pc":[311]},{"teal":173,"source":"contracts\\ContributionLogger.algo.ts:48","pc":[312]},{"teal":174,"source":"contracts\\ContributionLogger.algo.ts:48","pc":[313]},{"teal":175,"source":"contracts\\ContributionLogger.algo.ts:48","pc":[314]},{"teal":176,"source":"contracts\\ContributionLogger.algo.ts:48","pc":[315,316,317]},{"teal":181,"source":"contracts\\ContributionLogger.algo.ts:49","pc":[318,319]},{"teal":182,"source":"contracts\\ContributionLogger.algo.ts:49","pc":[320]},{"teal":183,"source":"contracts\\ContributionLogger.algo.ts:49","pc":[321]},{"teal":184,"source":"contracts\\ContributionLogger.algo.ts:49","pc":[322]},{"teal":188,"source":"contracts\\ContributionLogger.algo.ts:50","pc":[323,324]},{"teal":189,"source":"contracts\\ContributionLogger.algo.ts:50","pc":[325]},{"teal":190,"source":"contracts\\ContributionLogger.algo.ts:50","pc":[326,327]},{"teal":191,"source":"contracts\\ContributionLogger.algo.ts:50","pc":[328]},{"teal":195,"source":"contracts\\ContributionLogger.algo.ts:51","pc":[329,330]},{"teal":196,"source":"contracts\\ContributionLogger.algo.ts:51","pc":[331,332]},{"teal":197,"source":"contracts\\ContributionLogger.algo.ts:51","pc":[333]},{"teal":198,"source":"contracts\\ContributionLogger.algo.ts:51","pc":[334]},{"teal":203,"source":"contracts\\ContributionLogger.algo.ts:55","pc":[335]},{"teal":204,"source":"contracts\\ContributionLogger.algo.ts:55","pc":[336]},{"teal":205,"source":"contracts\\ContributionLogger.algo.ts:55","pc":[337]},{"teal":206,"source":"contracts\\ContributionLogger.algo.ts:55","pc":[338]},{"teal":207,"source":"contracts\\ContributionLogger.algo.ts:55","pc":[339]},{"teal":208,"source":"contracts\\ContributionLogger.algo.ts:55","pc":[340]},{"teal":212,"source":"contracts\\ContributionLogger.algo.ts:56","pc":[341]},{"teal":213,"source":"contracts\\ContributionLogger.algo.ts:56","pc":[342]},{"teal":214,"source":"contracts\\ContributionLogger.algo.ts:56","pc":[343,344]},{"teal":218,"source":"contracts\\ContributionLogger.algo.ts:58","pc":[345,346]},{"teal":219,"source":"contracts\\ContributionLogger.algo.ts:58","pc":[347]},{"teal":220,"source":"contracts\\ContributionLogger.algo.ts:58","pc":[348,349]},{"teal":221,"source":"contracts\\ContributionLogger.algo.ts:58","pc":[350]},{"teal":222,"source":"contracts\\ContributionLogger.algo.ts:58","pc":[351]},{"teal":223,"source":"contracts\\ContributionLogger.algo.ts:58","pc":[352]},{"teal":224,"source":"contracts\\ContributionLogger.algo.ts:58","pc":[353]},{"teal":225,"source":"contracts\\ContributionLogger.algo.ts:58","pc":[354]},{"teal":229,"source":"contracts\\ContributionLogger.algo.ts:59","pc":[355,356]},{"teal":230,"source":"contracts\\ContributionLogger.algo.ts:59","pc":[357]},{"teal":231,"source":"contracts\\ContributionLogger.algo.ts:59","pc":[358]},{"teal":232,"source":"contracts\\ContributionLogger.algo.ts:59","pc":[359]},{"teal":233,"source":"contracts\\ContributionLogger.algo.ts:59","pc":[360]},{"teal":234,"source":"contracts\\ContributionLogger.algo.ts:59","pc":[361]},{"teal":238,"source":"contracts\\ContributionLogger.algo.ts:62","pc":[362,363]},{"teal":239,"source":"contracts\\ContributionLogger.algo.ts:62","pc":[364]},{"teal":240,"source":"contracts\\ContributionLogger.algo.ts:62","pc":[365]},{"teal":241,"source":"contracts\\ContributionLogger.algo.ts:62","pc":[366,367]},{"teal":245,"source":"contracts\\ContributionLogger.algo.ts:63","pc":[368,369]},{"teal":246,"source":"contracts\\ContributionLogger.algo.ts:63","pc":[370]},{"teal":247,"source":"contracts\\ContributionLogger.algo.ts:63","pc":[371,372]},{"teal":248,"source":"contracts\\ContributionLogger.algo.ts:63","pc":[373,374]},{"teal":249,"source":"contracts\\ContributionLogger.algo.ts:63","pc":[375,376]},{"teal":250,"source":"contracts\\ContributionLogger.algo.ts:63","pc":[377]},{"teal":251,"source":"contracts\\ContributionLogger.algo.ts:63","pc":[378]},{"teal":252,"source":"contracts\\ContributionLogger.algo.ts:63","pc":[379]},{"teal":256,"source":"contracts\\ContributionLogger.algo.ts:66","pc":[380,381]},{"teal":257,"source":"contracts\\ContributionLogger.algo.ts:66","pc":[382,383]},{"teal":258,"source":"contracts\\ContributionLogger.algo.ts:66","pc":[384,385]},{"teal":259,"source":"contracts\\ContributionLogger.algo.ts:66","pc":[386]},{"teal":263,"source":"contracts\\ContributionLogger.algo.ts:70","pc":[387,388]},{"teal":264,"source":"contracts\\ContributionLogger.algo.ts:70","pc":[389]},{"teal":265,"source":"contracts\\ContributionLogger.algo.ts:70","pc":[390,391]},{"teal":266,"source":"contracts\\ContributionLogger.algo.ts:70","pc":[392]},{"teal":267,"source":"contracts\\ContributionLogger.algo.ts:70","pc":[393,394]},{"teal":268,"source":"contracts\\ContributionLogger.algo.ts:70","pc":[395]},{"teal":269,"source":"contracts\\ContributionLogger.algo.ts:70","pc":[396,397]},{"teal":270,"source":"contracts\\ContributionLogger.algo.ts:70","pc":[398]},{"teal":271,"source":"contracts\\ContributionLogger.algo.ts:70","pc":[399,400]},{"teal":272,"source":"contracts\\ContributionLogger.algo.ts:70","pc":[401]},{"teal":273,"source":"contracts\\ContributionLogger.algo.ts:70","pc":[402]},{"teal":274,"source":"contracts\\ContributionLogger.algo.ts:70","pc":[403,404]},{"teal":275,"source":"contracts\\ContributionLogger.algo.ts:70","pc":[405]},{"teal":276,"source":"contracts\\ContributionLogger.algo.ts:70","pc":[406,407]},{"teal":277,"source":"contracts\\ContributionLogger.algo.ts:70","pc":[408]},{"teal":278,"source":"contracts\\ContributionLogger.algo.ts:70","pc":[409]},{"teal":279,"source":"contracts\\ContributionLogger.algo.ts:70","pc":[410,411]},{"teal":283,"source":"contracts\\ContributionLogger.algo.ts:71","pc":[412,413]},{"teal":284,"source":"contracts\\ContributionLogger.algo.ts:71","pc":[414]},{"teal":288,"source":"contracts\\ContributionLogger.algo.ts:73","pc":[415,416]},{"teal":291,"source":"contracts\\ContributionLogger.algo.ts:31","pc":[417,418]},{"teal":294,"source":"contracts\\ContributionLogger.algo.ts:31","pc":[419,420]},{"teal":295,"source":"contracts\\ContributionLogger.algo.ts:31","pc":[421]},{"teal":300,"source":"contracts\\ContributionLogger.algo.ts:79","pc":[422,423]},{"teal":303,"source":"contracts\\ContributionLogger.algo.ts:79","pc":[424,425,426]},{"teal":304,"source":"contracts\\ContributionLogger.algo.ts:79","pc":[427]},{"teal":307,"source":"contracts\\ContributionLogger.algo.ts:79","pc":[428,429,430]},{"teal":308,"source":"contracts\\ContributionLogger.algo.ts:79","pc":[431]},{"teal":309,"source":"contracts\\ContributionLogger.algo.ts:79","pc":[432]},{"teal":310,"source":"contracts\\ContributionLogger.algo.ts:79","pc":[433]},{"teal":311,"source":"contracts\\ContributionLogger.algo.ts:79","pc":[434]},{"teal":317,"source":"contracts\\ContributionLogger.algo.ts:79","pc":[435,436,437]},{"teal":322,"source":"contracts\\ContributionLogger.algo.ts:81","pc":[438,439]},{"teal":323,"source":"contracts\\ContributionLogger.algo.ts:81","pc":[440]},{"teal":324,"source":"contracts\\ContributionLogger.algo.ts:81","pc":[441]},{"teal":325,"source":"contracts\\ContributionLogger.algo.ts:81","pc":[442]},{"teal":326,"source":"contracts\\ContributionLogger.algo.ts:81","pc":[443,444,445]},{"teal":327,"source":"contracts\\ContributionLogger.algo.ts:81","pc":[446,447]},{"teal":328,"source":"contracts\\ContributionLogger.algo.ts:81","pc":[448]},{"teal":329,"source":"contracts\\ContributionLogger.algo.ts:81","pc":[449]},{"teal":330,"source":"contracts\\ContributionLogger.algo.ts:81","pc":[450]},{"teal":331,"source":"contracts\\ContributionLogger.algo.ts:81","pc":[451]},{"teal":334,"source":"contracts\\ContributionLogger.algo.ts:81","pc":[452,453,454]},{"teal":339,"source":"contracts\\ContributionLogger.algo.ts:82","pc":[455,456,457,458,459,460,461,462,463,464]},{"teal":340,"source":"contracts\\ContributionLogger.algo.ts:82","pc":[465,466]},{"teal":341,"source":"contracts\\ContributionLogger.algo.ts:82","pc":[467]},{"teal":342,"source":"contracts\\ContributionLogger.algo.ts:82","pc":[468]},{"teal":343,"source":"contracts\\ContributionLogger.algo.ts:82","pc":[469]},{"teal":348,"source":"contracts\\ContributionLogger.algo.ts:84","pc":[470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487]},{"teal":349,"source":"contracts\\ContributionLogger.algo.ts:79","pc":[488]},{"teal":354,"source":"contracts\\ContributionLogger.algo.ts:90","pc":[489,490]},{"teal":357,"source":"contracts\\ContributionLogger.algo.ts:90","pc":[491,492,493]},{"teal":358,"source":"contracts\\ContributionLogger.algo.ts:90","pc":[494]},{"teal":359,"source":"contracts\\ContributionLogger.algo.ts:90","pc":[495]},{"teal":360,"source":"contracts\\ContributionLogger.algo.ts:90","pc":[496]},{"teal":361,"source":"contracts\\ContributionLogger.algo.ts:90","pc":[497]},{"teal":364,"source":"contracts\\ContributionLogger.algo.ts:90","errorMessage":"argument 0 (volunteer) for getVolunteerStats must be a address","pc":[498]},{"teal":367,"source":"contracts\\ContributionLogger.algo.ts:90","pc":[499,500,501]},{"teal":368,"source":"contracts\\ContributionLogger.algo.ts:90","pc":[502]},{"teal":369,"source":"contracts\\ContributionLogger.algo.ts:90","pc":[503]},{"teal":370,"source":"contracts\\ContributionLogger.algo.ts:90","pc":[504]},{"teal":371,"source":"contracts\\ContributionLogger.algo.ts:90","pc":[505]},{"teal":377,"source":"contracts\\ContributionLogger.algo.ts:90","pc":[506,507,508]},{"teal":382,"source":"contracts\\ContributionLogger.algo.ts:91","pc":[509,510]},{"teal":383,"source":"contracts\\ContributionLogger.algo.ts:91","pc":[511,512,513]},{"teal":384,"source":"contracts\\ContributionLogger.algo.ts:91","pc":[514]},{"teal":385,"source":"contracts\\ContributionLogger.algo.ts:91","pc":[515]},{"teal":386,"source":"contracts\\ContributionLogger.algo.ts:91","pc":[516]},{"teal":387,"source":"contracts\\ContributionLogger.algo.ts:91","pc":[517]},{"teal":388,"source":"contracts\\ContributionLogger.algo.ts:91","pc":[518]},{"teal":389,"source":"contracts\\ContributionLogger.algo.ts:91","pc":[519,520,521]},{"teal":394,"source":"contracts\\ContributionLogger.algo.ts:92","pc":[522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547]},{"teal":395,"source":"contracts\\ContributionLogger.algo.ts:92","pc":[548]},{"teal":404,"source":"contracts\\ContributionLogger.algo.ts:96","pc":[549,550]},{"teal":405,"source":"contracts\\ContributionLogger.algo.ts:96","pc":[551]},{"teal":406,"source":"contracts\\ContributionLogger.algo.ts:96","pc":[552]},{"teal":407,"source":"contracts\\ContributionLogger.algo.ts:96","pc":[553]},{"teal":408,"source":"contracts\\ContributionLogger.algo.ts:97","pc":[554,555]},{"teal":409,"source":"contracts\\ContributionLogger.algo.ts:97","pc":[556]},{"teal":410,"source":"contracts\\ContributionLogger.algo.ts:97","pc":[557]},{"teal":411,"source":"contracts\\ContributionLogger.algo.ts:97","pc":[558]},{"teal":412,"source":"contracts\\ContributionLogger.algo.ts:97","pc":[559]},{"teal":413,"source":"contracts\\ContributionLogger.algo.ts:98","pc":[560,561]},{"teal":414,"source":"contracts\\ContributionLogger.algo.ts:98","pc":[562,563]},{"teal":415,"source":"contracts\\ContributionLogger.algo.ts:98","pc":[564]},{"teal":416,"source":"contracts\\ContributionLogger.algo.ts:98","pc":[565]},{"teal":417,"source":"contracts\\ContributionLogger.algo.ts:98","pc":[566]},{"teal":418,"source":"contracts\\ContributionLogger.algo.ts:90","pc":[567]},{"teal":423,"source":"contracts\\ContributionLogger.algo.ts:105","pc":[568,569]},{"teal":426,"source":"contracts\\ContributionLogger.algo.ts:109","pc":[570,571,572]},{"teal":429,"source":"contracts\\ContributionLogger.algo.ts:108","pc":[573,574,575]},{"teal":430,"source":"contracts\\ContributionLogger.algo.ts:108","pc":[576,577,578]},{"teal":433,"source":"contracts\\ContributionLogger.algo.ts:107","pc":[579,580,581]},{"teal":434,"source":"contracts\\ContributionLogger.algo.ts:107","pc":[582,583,584]},{"teal":437,"source":"contracts\\ContributionLogger.algo.ts:106","pc":[585,586,587]},{"teal":438,"source":"contracts\\ContributionLogger.algo.ts:106","pc":[588,589,590]},{"teal":441,"source":"contracts\\ContributionLogger.algo.ts:105","pc":[591,592,593]},{"teal":442,"source":"contracts\\ContributionLogger.algo.ts:105","pc":[594]},{"teal":443,"source":"contracts\\ContributionLogger.algo.ts:105","pc":[595]},{"teal":444,"source":"contracts\\ContributionLogger.algo.ts:105","pc":[596]},{"teal":445,"source":"contracts\\ContributionLogger.algo.ts:105","pc":[597]},{"teal":446,"source":"contracts\\ContributionLogger.algo.ts:105","pc":[598]},{"teal":452,"source":"contracts\\ContributionLogger.algo.ts:105","pc":[599,600,601]},{"teal":455,"source":"contracts\\ContributionLogger.algo.ts:105","pc":[602]},{"teal":456,"source":"contracts\\ContributionLogger.algo.ts:105","pc":[603,604]},{"teal":460,"source":"contracts\\ContributionLogger.algo.ts:111","pc":[605,606]},{"teal":461,"source":"contracts\\ContributionLogger.algo.ts:111","pc":[607]},{"teal":462,"source":"contracts\\ContributionLogger.algo.ts:111","pc":[608,609]},{"teal":463,"source":"contracts\\ContributionLogger.algo.ts:111","pc":[610]},{"teal":466,"source":"contracts\\ContributionLogger.algo.ts:111","errorMessage":"Too many contributions in one call","pc":[611]},{"teal":470,"source":"contracts\\ContributionLogger.algo.ts:112","pc":[612,613]},{"teal":471,"source":"contracts\\ContributionLogger.algo.ts:112","pc":[614]},{"teal":472,"source":"contracts\\ContributionLogger.algo.ts:112","pc":[615,616]},{"teal":473,"source":"contracts\\ContributionLogger.algo.ts:112","pc":[617]},{"teal":474,"source":"contracts\\ContributionLogger.algo.ts:112","pc":[618]},{"teal":477,"source":"contracts\\ContributionLogger.algo.ts:112","errorMessage":"Mismatched volunteers and hours","pc":[619]},{"teal":481,"source":"contracts\\ContributionLogger.algo.ts:113","pc":[620,621]},{"teal":482,"source":"contracts\\ContributionLogger.algo.ts:113","pc":[622]},{"teal":483,"source":"contracts\\ContributionLogger.algo.ts:113","pc":[623,624]},{"teal":484,"source":"contracts\\ContributionLogger.algo.ts:113","pc":[625]},{"teal":485,"source":"contracts\\ContributionLogger.algo.ts:113","pc":[626]},{"teal":488,"source":"contracts\\ContributionLogger.algo.ts:113","errorMessage":"Mismatched volunteers and descriptions","pc":[627]},{"teal":492,"source":"contracts\\ContributionLogger.algo.ts:115","pc":[628]},{"teal":493,"source":"contracts\\ContributionLogger.algo.ts:115","pc":[629,630]},{"teal":497,"source":"contracts\\ContributionLogger.algo.ts:117","pc":[631]},{"teal":498,"source":"contracts\\ContributionLogger.algo.ts:117","pc":[632,633]},{"teal":503,"source":"contracts\\ContributionLogger.algo.ts:117","pc":[634,635]},{"teal":504,"source":"contracts\\ContributionLogger.algo.ts:117","pc":[636,637]},{"teal":505,"source":"contracts\\ContributionLogger.algo.ts:117","pc":[638]},{"teal":506,"source":"contracts\\ContributionLogger.algo.ts:117","pc":[639]},{"teal":507,"source":"contracts\\ContributionLogger.algo.ts:117","pc":[640,641,642]},{"teal":511,"source":"contracts\\ContributionLogger.algo.ts:118","pc":[643,644]},{"teal":512,"source":"contracts\\ContributionLogger.algo.ts:118","pc":[645,646]},{"teal":513,"source":"contracts\\ContributionLogger.algo.ts:118","pc":[647]},{"teal":514,"source":"contracts\\ContributionLogger.algo.ts:118","pc":[648,649]},{"teal":515,"source":"contracts\\ContributionLogger.algo.ts:118","pc":[650]},{"teal":516,"source":"contracts\\ContributionLogger.algo.ts:118","pc":[651]},{"teal":517,"source":"contracts\\ContributionLogger.algo.ts:118","pc":[652]},{"teal":518,"source":"contracts\\ContributionLogger.algo.ts:118","pc":[653,654]},{"teal":519,"source":"contracts\\ContributionLogger.algo.ts:118","pc":[655]},{"teal":520,"source":"contracts\\ContributionLogger.algo.ts:118","pc":[656]},{"teal":521,"source":"contracts\\ContributionLogger.algo.ts:118","pc":[657]},{"teal":522,"source":"contracts\\ContributionLogger.algo.ts:118","pc":[658,659]},{"teal":526,"source":"contracts\\ContributionLogger.algo.ts:119","pc":[660,661]},{"teal":527,"source":"contracts\\ContributionLogger.algo.ts:119","pc":[662,663]},{"teal":528,"source":"contracts\\ContributionLogger.algo.ts:119","pc":[664]},{"teal":529,"source":"contracts\\ContributionLogger.algo.ts:119","pc":[665,666]},{"teal":530,"source":"contracts\\ContributionLogger.algo.ts:119","pc":[667,668]},{"teal":531,"source":"contracts\\ContributionLogger.algo.ts:119","pc":[669]},{"teal":532,"source":"contracts\\ContributionLogger.algo.ts:119","pc":[670]},{"teal":533,"source":"contracts\\ContributionLogger.algo.ts:119","pc":[671,672]},{"teal":534,"source":"contracts\\ContributionLogger.algo.ts:119","pc":[673]},{"teal":535,"source":"contracts\\ContributionLogger.algo.ts:119","pc":[674,675]},{"teal":536,"source":"contracts\\ContributionLogger.algo.ts:119","pc":[676]},{"teal":537,"source":"contracts\\ContributionLogger.algo.ts:119","pc":[677]},{"teal":538,"source":"contracts\\ContributionLogger.algo.ts:119","pc":[678,679]},{"teal":542,"source":"contracts\\ContributionLogger.algo.ts:120","pc":[680,681]},{"teal":543,"source":"contracts\\ContributionLogger.algo.ts:120","pc":[682,683]},{"teal":544,"source":"contracts\\ContributionLogger.algo.ts:120","pc":[684]},{"teal":545,"source":"contracts\\ContributionLogger.algo.ts:120","pc":[685,686]},{"teal":546,"source":"contracts\\ContributionLogger.algo.ts:120","pc":[687]},{"teal":547,"source":"contracts\\ContributionLogger.algo.ts:120","pc":[688]},{"teal":548,"source":"contracts\\ContributionLogger.algo.ts:120","pc":[689]},{"teal":549,"source":"contracts\\ContributionLogger.algo.ts:120","pc":[690]},{"teal":550,"source":"contracts\\ContributionLogger.algo.ts:120","pc":[691]},{"teal":551,"source":"contracts\\ContributionLogger.algo.ts:120","pc":[692,693]},{"teal":552,"source":"contracts\\ContributionLogger.algo.ts:120","pc":[694,695]},{"teal":553,"source":"contracts\\ContributionLogger.algo.ts:120","pc":[696,697]},{"teal":554,"source":"contracts\\ContributionLogger.algo.ts:120","pc":[698]},{"teal":555,"source":"contracts\\ContributionLogger.algo.ts:120","pc":[699]},{"teal":556,"source":"contracts\\ContributionLogger.algo.ts:120","pc":[700]},{"teal":557,"source":"contracts\\ContributionLogger.algo.ts:120","pc":[701]},{"teal":558,"source":"contracts\\ContributionLogger.algo.ts:120","pc":[702,703]},{"teal":559,"source":"contracts\\ContributionLogger.algo.ts:120","pc":[704]},{"teal":560,"source":"contracts\\ContributionLogger.algo.ts:120","pc":[705]},{"teal":561,"source":"contracts\\ContributionLogger.algo.ts:120","pc":[706]},{"teal":562,"source":"contracts\\ContributionLogger.algo.ts:120","pc":[707]},{"teal":563,"source":"contracts\\ContributionLogger.algo.ts:120","pc":[708]},{"teal":564,"source":"contracts\\ContributionLogger.algo.ts:120","pc":[709]},{"teal":565,"source":"contracts\\ContributionLogger.algo.ts:120","pc":[710]},{"teal":566,"source":"contracts\\ContributionLogger.algo.ts:120","pc":[711,712,713]},{"teal":567,"source":"contracts\\ContributionLogger.algo.ts:120","pc":[714,715]},{"teal":572,"source":"contracts\\ContributionLogger.algo.ts:122","pc":[716,717]},{"teal":573,"source":"contracts\\ContributionLogger.algo.ts:122","pc":[718]},{"teal":574,"source":"contracts\\ContributionLogger.algo.ts:122","pc":[719]},{"teal":575,"source":"contracts\\ContributionLogger.algo.ts:122","pc":[720]},{"teal":576,"source":"contracts\\ContributionLogger.algo.ts:122","pc":[721,722,723]},{"teal":577,"source":"contracts\\ContributionLogger.algo.ts:122","pc":[724,725]},{"teal":578,"source":"contracts\\ContributionLogger.algo.ts:122","pc":[726,727]},{"teal":579,"source":"contracts\\ContributionLogger.algo.ts:122","pc":[728]},{"teal":580,"source":"contracts\\ContributionLogger.algo.ts:122","pc":[729]},{"teal":583,"source":"contracts\\ContributionLogger.algo.ts:122","pc":[730,731,732]},{"teal":589,"source":"contracts\\ContributionLogger.algo.ts:124","pc":[733,734]},{"teal":590,"source":"contracts\\ContributionLogger.algo.ts:124","pc":[735,736,737]},{"teal":591,"source":"contracts\\ContributionLogger.algo.ts:124","pc":[738]},{"teal":592,"source":"contracts\\ContributionLogger.algo.ts:124","pc":[739]},{"teal":593,"source":"contracts\\ContributionLogger.algo.ts:124","pc":[740]},{"teal":594,"source":"contracts\\ContributionLogger.algo.ts:124","pc":[741]},{"teal":595,"source":"contracts\\ContributionLogger.algo.ts:124","pc":[742]},{"teal":596,"source":"contracts\\ContributionLogger.algo.ts:124","pc":[743,744,745]},{"teal":601,"source":"contracts\\ContributionLogger.algo.ts:125","pc":[746,747]},{"teal":602,"source":"contracts\\ContributionLogger.algo.ts:125","pc":[748]},{"teal":603,"source":"contracts\\ContributionLogger.algo.ts:125","pc":[749]},{"teal":604,"source":"contracts\\ContributionLogger.algo.ts:125","pc":[750]},{"teal":608,"source":"contracts\\ContributionLogger.algo.ts:126","pc":[751,752]},{"teal":609,"source":"contracts\\ContributionLogger.algo.ts:126","pc":[753]},{"teal":610,"source":"contracts\\ContributionLogger.algo.ts:126","pc":[754,755]},{"teal":611,"source":"contracts\\ContributionLogger.algo.ts:126","pc":[756]},{"teal":615,"source":"contracts\\ContributionLogger.algo.ts:127","pc":[757,758]},{"teal":616,"source":"contracts\\ContributionLogger.algo.ts:127","pc":[759,760]},{"teal":617,"source":"contracts\\ContributionLogger.algo.ts:127","pc":[761]},{"teal":618,"source":"contracts\\ContributionLogger.algo.ts:127","pc":[762]},{"teal":623,"source":"contracts\\ContributionLogger.algo.ts:131","pc":[763]},{"teal":624,"source":"contracts\\ContributionLogger.algo.ts:131","pc":[764]},{"teal":625,"source":"contracts\\ContributionLogger.algo.ts:131","pc":[765]},{"teal":626,"source":"contracts\\ContributionLogger.algo.ts:131","pc":[766]},{"teal":627,"source":"contracts\\ContributionLogger.algo.ts:131","pc":[767]},{"teal":628,"source":"contracts\\ContributionLogger.algo.ts:131","pc":[768]},{"teal":632,"source":"contracts\\ContributionLogger.algo.ts:132","pc":[769,770]},{"teal":633,"source":"contracts\\ContributionLogger.algo.ts:132","pc":[771]},{"teal":634,"source":"contracts\\ContributionLogger.algo.ts:132","pc":[772,773]},{"teal":635,"source":"contracts\\ContributionLogger.algo.ts:132","pc":[774]},{"teal":636,"source":"contracts\\ContributionLogger.algo.ts:132","pc":[775]},{"teal":637,"source":"contracts\\ContributionLogger.algo.ts:132","pc":[776]},{"teal":638,"source":"contracts\\ContributionLogger.algo.ts:132","pc":[777]},{"teal":639,"source":"contracts\\ContributionLogger.algo.ts:132","pc":[778]},{"teal":643,"source":"contracts\\ContributionLogger.algo.ts:133","pc":[779,780]},{"teal":644,"source":"contracts\\ContributionLogger.algo.ts:133","pc":[781]},{"teal":645,"source":"contracts\\ContributionLogger.algo.ts:133","pc":[782]},{"teal":646,"source":"contracts\\ContributionLogger.algo.ts:133","pc":[783]},{"teal":647,"source":"contracts\\ContributionLogger.algo.ts:133","pc":[784]},{"teal":648,"source":"contracts\\ContributionLogger.algo.ts:133","pc":[785]},{"teal":652,"source":"contracts\\ContributionLogger.algo.ts:135","pc":[786,787]},{"teal":653,"source":"contracts\\ContributionLogger.algo.ts:135","pc":[788]},{"teal":654,"source":"contracts\\ContributionLogger.algo.ts:135","pc":[789]},{"teal":655,"source":"contracts\\ContributionLogger.algo.ts:135","pc":[790,791]},{"teal":659,"source":"contracts\\ContributionLogger.algo.ts:136","pc":[792,793]},{"teal":660,"source":"contracts\\ContributionLogger.algo.ts:136","pc":[794]},{"teal":661,"source":"contracts\\ContributionLogger.algo.ts:136","pc":[795,796]},{"teal":662,"source":"contracts\\ContributionLogger.algo.ts:136","pc":[797,798]},{"teal":663,"source":"contracts\\ContributionLogger.algo.ts:136","pc":[799,800]},{"teal":664,"source":"contracts\\ContributionLogger.algo.ts:136","pc":[801]},{"teal":665,"source":"contracts\\ContributionLogger.algo.ts:136","pc":[802]},{"teal":666,"source":"contracts\\ContributionLogger.algo.ts:136","pc":[803]},{"teal":670,"source":"contracts\\ContributionLogger.algo.ts:137","pc":[804,805]},{"teal":671,"source":"contracts\\ContributionLogger.algo.ts:137","pc":[806,807]},{"teal":672,"source":"contracts\\ContributionLogger.algo.ts:137","pc":[808,809]},{"teal":673,"source":"contracts\\ContributionLogger.algo.ts:137","pc":[810]},{"teal":677,"source":"contracts\\ContributionLogger.algo.ts:139","pc":[811,812]},{"teal":678,"source":"contracts\\ContributionLogger.algo.ts:139","pc":[813]},{"teal":679,"source":"contracts\\ContributionLogger.algo.ts:139","pc":[814]},{"teal":680,"source":"contracts\\ContributionLogger.algo.ts:139","pc":[815,816]},{"teal":687,"source":"contracts\\ContributionLogger.algo.ts:117","pc":[817,818]},{"teal":688,"source":"contracts\\ContributionLogger.algo.ts:117","pc":[819]},{"teal":689,"source":"contracts\\ContributionLogger.algo.ts:117","pc":[820]},{"teal":690,"source":"contracts\\ContributionLogger.algo.ts:117","pc":[821,822]},{"teal":691,"source":"contracts\\ContributionLogger.algo.ts:117","pc":[823,824,825]},{"teal":696,"source":"contracts\\ContributionLogger.algo.ts:143","pc":[826,827]},{"teal":699,"source":"contracts\\ContributionLogger.algo.ts:105","pc":[828,829]},{"teal":702,"source":"contracts\\ContributionLogger.algo.ts:105","pc":[830,831]},{"teal":703,"source":"contracts\\ContributionLogger.algo.ts:105","pc":[832]},{"teal":708,"source":"contracts\\ContributionLogger.algo.ts:149","pc":[833,834,835]},{"teal":709,"source":"contracts\\ContributionLogger.algo.ts:149","pc":[836]},{"teal":710,"source":"contracts\\ContributionLogger.algo.ts:149","pc":[837]},{"teal":716,"source":"contracts\\ContributionLogger.algo.ts:149","pc":[838,839,840]},{"teal":720,"source":"contracts\\ContributionLogger.algo.ts:150","pc":[841,842]},{"teal":721,"source":"contracts\\ContributionLogger.algo.ts:150","pc":[843]},{"teal":722,"source":"contracts\\ContributionLogger.algo.ts:150","pc":[844]},{"teal":723,"source":"contracts\\ContributionLogger.algo.ts:150","pc":[845]},{"teal":727,"source":"contracts\\ContributionLogger.algo.ts:151","pc":[846,847]},{"teal":728,"source":"contracts\\ContributionLogger.algo.ts:151","pc":[848]},{"teal":729,"source":"contracts\\ContributionLogger.algo.ts:151","pc":[849,850]},{"teal":730,"source":"contracts\\ContributionLogger.algo.ts:151","pc":[851]},{"teal":734,"source":"contracts\\ContributionLogger.algo.ts:152","pc":[852,853]},{"teal":735,"source":"contracts\\ContributionLogger.algo.ts:152","pc":[854,855]},{"teal":736,"source":"contracts\\ContributionLogger.algo.ts:152","pc":[856]},{"teal":737,"source":"contracts\\ContributionLogger.algo.ts:152","pc":[857]},{"teal":738,"source":"contracts\\ContributionLogger.algo.ts:149","pc":[858]},{"teal":743,"source":"contracts\\ContributionLogger.algo.ts:158","pc":[859,860]},{"teal":746,"source":"contracts\\ContributionLogger.algo.ts:158","pc":[861,862,863]},{"teal":747,"source":"contracts\\ContributionLogger.algo.ts:158","pc":[864]},{"teal":748,"source":"contracts\\ContributionLogger.algo.ts:158","pc":[865]},{"teal":749,"source":"contracts\\ContributionLogger.algo.ts:158","pc":[866]},{"teal":750,"source":"contracts\\ContributionLogger.algo.ts:158","pc":[867]},{"teal":756,"source":"contracts\\ContributionLogger.algo.ts:158","pc":[868,869,870]},{"teal":760,"source":"contracts\\ContributionLogger.algo.ts:159","pc":[871,872]},{"teal":761,"source":"contracts\\ContributionLogger.algo.ts:159","pc":[873]},{"teal":762,"source":"contracts\\ContributionLogger.algo.ts:159","pc":[874]},{"teal":763,"source":"contracts\\ContributionLogger.algo.ts:159","pc":[875]},{"teal":764,"source":"contracts\\ContributionLogger.algo.ts:159","pc":[876]},{"teal":765,"source":"contracts\\ContributionLogger.algo.ts:159","pc":[877]},{"teal":766,"source":"contracts\\ContributionLogger.algo.ts:159","pc":[878]},{"teal":767,"source":"contracts\\ContributionLogger.algo.ts:158","pc":[879]},{"teal":770,"source":"contracts\\ContributionLogger.algo.ts:8","pc":[880,881,882,883,884,885]},{"teal":771,"source":"contracts\\ContributionLogger.algo.ts:8","pc":[886,887,888]},{"teal":772,"source":"contracts\\ContributionLogger.algo.ts:8","pc":[889,890,891,892]},{"teal":775,"source":"contracts\\ContributionLogger.algo.ts:8","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[893]},{"teal":778,"source":"contracts\\ContributionLogger.algo.ts:8","pc":[894,895,896,897,898,899]},{"teal":779,"source":"contracts\\ContributionLogger.algo.ts:8","pc":[900,901,902,903,904,905]},{"teal":780,"source":"contracts\\ContributionLogger.algo.ts:8","pc":[906,907,908,909,910,911]},{"teal":781,"source":"contracts\\ContributionLogger.algo.ts:8","pc":[912,913,914,915,916,917]},{"teal":782,"source":"contracts\\ContributionLogger.algo.ts:8","pc":[918,919,920,921,922,923]},{"teal":783,"source":"contracts\\ContributionLogger.algo.ts:8","pc":[924,925,926,927,928,929]},{"teal":784,"source":"contracts\\ContributionLogger.algo.ts:8","pc":[930,931,932]},{"teal":785,"source":"contracts\\ContributionLogger.algo.ts:8","pc":[933,934,935,936,937,938,939,940,941,942,943,944,945,946]},{"teal":788,"source":"contracts\\ContributionLogger.algo.ts:8","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[947]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAIAAEgAmQFCBgmCBd2b2x1bnRlZXJfY29udHJpYnV0aW9ucwAUY29udHJpYnV0aW9uX2NvdW50ZXIUdm9sdW50ZWVyX3JlcHV0YXRpb24WbGFzdF9jb250cmlidXRpb25fdGltZRN0b3RhbF9jb250cmlidXRpb25zBBUffHUBOjEYFIEGCzEZCI0MAtkAAAAAAAAAAAAAAssAAAAAAAAAAAAAADYaAReIAAIjQ4oBAIAWb3JnYW5pemVyX3JlZ2lzdHJ5X2FwcIv/ZycFImcqImeJJwY2GgVXAgA2GgRXAgA2GgMXNhoCVwIANhoBSRUkEkSIAAUWULAjQ4oFASlHAov9Ig1JQQAGi/0hBw4QRIv+FSINSUEABov+FSQOEESL/BWBgAEORIv7FYFADkSL/zYyAChjTEgUQQARi/8oImaL/yshBGaL/ycEImYqSWQjCGcqZIwAi/8oi/8oYiMIZicFSWQjCGeL/ytijAGL/yuLAYv9IQULCGaL/ycEMgdmiwAWJwdQi/5QJwdQi/0WUCcHUDIHFlCMAosCsIsAjABGAoknBjYaAReIAARQsCNDigEBi/8iDUlBAAaL/ypkDhBBAA+ACAAAAAAAAAABMgcWUImAEAAAAAAAAAAAAAAAAAAAAACJJwY2GgFJFSQSRIgABFCwI0OKAQGL/zYyAChjTEgUQQAbgBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACJi/8oYhaL/ytiFlCL/ycEYhZQiScGNhoENhoDVwIANhoCVwIANhoBVwIAiAAFFlCwI0OKBAEpRwWL/xWBCg5Ei/8Vi/0VEkSL/xWL/BUSRCKMACKMAYsBi/8VDEEAt4v/Nf8iiwEkCwg0/0wkWIwCi/01/yKLASEGCwg0/0whBlgXjAOL/DX/IosBJQsIJQg0/zT/TwJZJQhJNP9MWSMLJQhYVwIAjASLAyINSUEABosDIQcOEEEAVIsCNjIAKGNMSBRBABGLAigiZosCKyEEZosCJwQiZipJZCMIZ4sCKIsCKGIjCGYnBUlkIwhniwIrYowFiwIriwWLAyEFCwhmiwInBDIHZosAIwiMAIsBIwiMAUL/QIsAjABGBYmIAAIjQ4oAADEAKCJmMQArIQRmMQAnBCJmiScGiAAEULAjQ4oAAScFZBYqZBZQiYAElzthbzYaAI4B/SkAgAQW54Q4gATd14KLgAQNdCgLgAQ5tK3qgAQpMU2VgASxLMpvNhoAjgb9Iv3z/jb+hf+O/6gA","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":3,"patch":0,"commitHash":"3e5d694b+"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the ContributionLogger contract
 */
export type ContributionLoggerArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(uint64)void': {
      organizerRegistryAppId: bigint | number
    }
    'logContribution(address,string,uint64,string,string)uint64': {
      volunteer: string
      contributionType: string
      hours: bigint | number
      description: string
      location: string
    }
    'verifyContribution(uint64)(uint64,uint64)': {
      contributionId: bigint | number
    }
    'getVolunteerStats(address)(uint64,uint64,uint64)': {
      volunteer: string
    }
    'bulkLogContributions(address[],string,uint64[],string[])uint64': {
      volunteers: string[]
      contributionType: string
      hours: bigint[] | number[]
      descriptions: string[]
    }
    'optIn()void': Record<string, never>
    'getContractStats()(uint64,uint64)': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(uint64)void': [organizerRegistryAppId: bigint | number]
    'logContribution(address,string,uint64,string,string)uint64': [volunteer: string, contributionType: string, hours: bigint | number, description: string, location: string]
    'verifyContribution(uint64)(uint64,uint64)': [contributionId: bigint | number]
    'getVolunteerStats(address)(uint64,uint64,uint64)': [volunteer: string]
    'bulkLogContributions(address[],string,uint64[],string[])uint64': [volunteers: string[], contributionType: string, hours: bigint[] | number[], descriptions: string[]]
    'optIn()void': []
    'getContractStats()(uint64,uint64)': []
  }
}

/**
 * The return type for each method
 */
export type ContributionLoggerReturns = {
  'createApplication(uint64)void': void
  'logContribution(address,string,uint64,string,string)uint64': bigint
  'verifyContribution(uint64)(uint64,uint64)': [bigint, bigint]
  'getVolunteerStats(address)(uint64,uint64,uint64)': [bigint, bigint, bigint]
  'bulkLogContributions(address[],string,uint64[],string[])uint64': bigint
  'optIn()void': void
  'getContractStats()(uint64,uint64)': [bigint, bigint]
}

/**
 * Defines the types of available calls and state of the ContributionLogger smart contract.
 */
export type ContributionLoggerTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(uint64)void' | 'createApplication', {
      argsObj: ContributionLoggerArgs['obj']['createApplication(uint64)void']
      argsTuple: ContributionLoggerArgs['tuple']['createApplication(uint64)void']
      returns: ContributionLoggerReturns['createApplication(uint64)void']
    }>
    & Record<'logContribution(address,string,uint64,string,string)uint64' | 'logContribution', {
      argsObj: ContributionLoggerArgs['obj']['logContribution(address,string,uint64,string,string)uint64']
      argsTuple: ContributionLoggerArgs['tuple']['logContribution(address,string,uint64,string,string)uint64']
      returns: ContributionLoggerReturns['logContribution(address,string,uint64,string,string)uint64']
    }>
    & Record<'verifyContribution(uint64)(uint64,uint64)' | 'verifyContribution', {
      argsObj: ContributionLoggerArgs['obj']['verifyContribution(uint64)(uint64,uint64)']
      argsTuple: ContributionLoggerArgs['tuple']['verifyContribution(uint64)(uint64,uint64)']
      returns: ContributionLoggerReturns['verifyContribution(uint64)(uint64,uint64)']
    }>
    & Record<'getVolunteerStats(address)(uint64,uint64,uint64)' | 'getVolunteerStats', {
      argsObj: ContributionLoggerArgs['obj']['getVolunteerStats(address)(uint64,uint64,uint64)']
      argsTuple: ContributionLoggerArgs['tuple']['getVolunteerStats(address)(uint64,uint64,uint64)']
      returns: ContributionLoggerReturns['getVolunteerStats(address)(uint64,uint64,uint64)']
    }>
    & Record<'bulkLogContributions(address[],string,uint64[],string[])uint64' | 'bulkLogContributions', {
      argsObj: ContributionLoggerArgs['obj']['bulkLogContributions(address[],string,uint64[],string[])uint64']
      argsTuple: ContributionLoggerArgs['tuple']['bulkLogContributions(address[],string,uint64[],string[])uint64']
      returns: ContributionLoggerReturns['bulkLogContributions(address[],string,uint64[],string[])uint64']
    }>
    & Record<'optIn()void' | 'optIn', {
      argsObj: ContributionLoggerArgs['obj']['optIn()void']
      argsTuple: ContributionLoggerArgs['tuple']['optIn()void']
      returns: ContributionLoggerReturns['optIn()void']
    }>
    & Record<'getContractStats()(uint64,uint64)' | 'getContractStats', {
      argsObj: ContributionLoggerArgs['obj']['getContractStats()(uint64,uint64)']
      argsTuple: ContributionLoggerArgs['tuple']['getContractStats()(uint64,uint64)']
      returns: ContributionLoggerReturns['getContractStats()(uint64,uint64)']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        organizerRegistryAppId: bigint
        totalContributions: bigint
        contributionCounter: bigint
      }
      maps: {}
    }
    local: {
      keys: {
        volunteerContributions: bigint
        volunteerReputation: bigint
        lastContributionTime: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type ContributionLoggerSignatures = keyof ContributionLoggerTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type ContributionLoggerNonVoidMethodSignatures = keyof ContributionLoggerTypes['methods'] extends infer T ? T extends keyof ContributionLoggerTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the ContributionLogger smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends ContributionLoggerSignatures> = ContributionLoggerTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the ContributionLogger smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ContributionLoggerSignatures> = ContributionLoggerTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = ContributionLoggerTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = ContributionLoggerTypes['state']['local']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type ContributionLoggerCreateCallParams =
  | Expand<CallParams<ContributionLoggerArgs['obj']['createApplication(uint64)void'] | ContributionLoggerArgs['tuple']['createApplication(uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<ContributionLoggerArgs['obj']['createApplication(uint64)void'] | ContributionLoggerArgs['tuple']['createApplication(uint64)void']> & {method: 'createApplication(uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type ContributionLoggerDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: ContributionLoggerCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the ContributionLogger smart contract
 */
export abstract class ContributionLoggerParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends ContributionLoggerCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(uint64)void':
            return ContributionLoggerParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the ContributionLogger smart contract using the createApplication(uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<ContributionLoggerArgs['obj']['createApplication(uint64)void'] | ContributionLoggerArgs['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.organizerRegistryAppId],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the logContribution(address,string,uint64,string,string)uint64 ABI method
   *
   * Log a contribution (called by authorized organizers)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static logContribution(params: CallParams<ContributionLoggerArgs['obj']['logContribution(address,string,uint64,string,string)uint64'] | ContributionLoggerArgs['tuple']['logContribution(address,string,uint64,string,string)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'logContribution(address,string,uint64,string,string)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.volunteer, params.args.contributionType, params.args.hours, params.args.description, params.args.location],
    }
  }
  /**
   * Constructs a no op call for the verifyContribution(uint64)(uint64,uint64) ABI method
   *
   * Verify a contribution exists and return details
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static verifyContribution(params: CallParams<ContributionLoggerArgs['obj']['verifyContribution(uint64)(uint64,uint64)'] | ContributionLoggerArgs['tuple']['verifyContribution(uint64)(uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'verifyContribution(uint64)(uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.contributionId],
    }
  }
  /**
   * Constructs a no op call for the getVolunteerStats(address)(uint64,uint64,uint64) ABI method
   *
   * Get volunteer statistics
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getVolunteerStats(params: CallParams<ContributionLoggerArgs['obj']['getVolunteerStats(address)(uint64,uint64,uint64)'] | ContributionLoggerArgs['tuple']['getVolunteerStats(address)(uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getVolunteerStats(address)(uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.volunteer],
    }
  }
  /**
   * Constructs a no op call for the bulkLogContributions(address[],string,uint64[],string[])uint64 ABI method
   *
   * Bulk log contributions (for efficiency)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bulkLogContributions(params: CallParams<ContributionLoggerArgs['obj']['bulkLogContributions(address[],string,uint64[],string[])uint64'] | ContributionLoggerArgs['tuple']['bulkLogContributions(address[],string,uint64[],string[])uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bulkLogContributions(address[],string,uint64[],string[])uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.volunteers, params.args.contributionType, params.args.hours, params.args.descriptions],
    }
  }
  /**
   * Constructs a no op call for the optIn()void ABI method
   *
   * Opt in to start tracking contributions
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optIn(params: CallParams<ContributionLoggerArgs['obj']['optIn()void'] | ContributionLoggerArgs['tuple']['optIn()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'optIn()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getContractStats()(uint64,uint64) ABI method
   *
   * Get contract statistics
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getContractStats(params: CallParams<ContributionLoggerArgs['obj']['getContractStats()(uint64,uint64)'] | ContributionLoggerArgs['tuple']['getContractStats()(uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getContractStats()(uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ContributionLogger smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class ContributionLoggerFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `ContributionLoggerFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new ContributionLoggerClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new ContributionLoggerClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ContributionLogger smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: ContributionLoggerDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? ContributionLoggerParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (ContributionLoggerCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new ContributionLoggerClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ContributionLogger smart contract using the createApplication(uint64)void ABI method.
       *
       * Initialize the ContributionLogger contract
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<ContributionLoggerArgs['obj']['createApplication(uint64)void'] | ContributionLoggerArgs['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(ContributionLoggerParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ContributionLogger smart contract using the createApplication(uint64)void ABI method.
       *
       * Initialize the ContributionLogger contract
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<ContributionLoggerArgs['obj']['createApplication(uint64)void'] | ContributionLoggerArgs['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(ContributionLoggerParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ContributionLogger smart contract using an ABI method call using the createApplication(uint64)void ABI method.
       *
       * Initialize the ContributionLogger contract
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<ContributionLoggerArgs['obj']['createApplication(uint64)void'] | ContributionLoggerArgs['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(ContributionLoggerParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | ContributionLoggerReturns['createApplication(uint64)void']) }, appClient: new ContributionLoggerClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ContributionLogger smart contract
 */
export class ContributionLoggerClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `ContributionLoggerClient`
   *
   * @param appClient An `AppClient` instance which has been created with the ContributionLogger app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `ContributionLoggerClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends ContributionLoggerNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `ContributionLoggerClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<ContributionLoggerClient> {
    return new ContributionLoggerClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `ContributionLoggerClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<ContributionLoggerClient> {
    return new ContributionLoggerClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ContributionLogger smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ContributionLogger smart contract using the `logContribution(address,string,uint64,string,string)uint64` ABI method.
     *
     * Log a contribution (called by authorized organizers)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    logContribution: (params: CallParams<ContributionLoggerArgs['obj']['logContribution(address,string,uint64,string,string)uint64'] | ContributionLoggerArgs['tuple']['logContribution(address,string,uint64,string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ContributionLoggerParamsFactory.logContribution(params))
    },

    /**
     * Makes a call to the ContributionLogger smart contract using the `verifyContribution(uint64)(uint64,uint64)` ABI method.
     *
     * Verify a contribution exists and return details
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    verifyContribution: (params: CallParams<ContributionLoggerArgs['obj']['verifyContribution(uint64)(uint64,uint64)'] | ContributionLoggerArgs['tuple']['verifyContribution(uint64)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ContributionLoggerParamsFactory.verifyContribution(params))
    },

    /**
     * Makes a call to the ContributionLogger smart contract using the `getVolunteerStats(address)(uint64,uint64,uint64)` ABI method.
     *
     * Get volunteer statistics
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getVolunteerStats: (params: CallParams<ContributionLoggerArgs['obj']['getVolunteerStats(address)(uint64,uint64,uint64)'] | ContributionLoggerArgs['tuple']['getVolunteerStats(address)(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ContributionLoggerParamsFactory.getVolunteerStats(params))
    },

    /**
     * Makes a call to the ContributionLogger smart contract using the `bulkLogContributions(address[],string,uint64[],string[])uint64` ABI method.
     *
     * Bulk log contributions (for efficiency)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bulkLogContributions: (params: CallParams<ContributionLoggerArgs['obj']['bulkLogContributions(address[],string,uint64[],string[])uint64'] | ContributionLoggerArgs['tuple']['bulkLogContributions(address[],string,uint64[],string[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ContributionLoggerParamsFactory.bulkLogContributions(params))
    },

    /**
     * Makes a call to the ContributionLogger smart contract using the `optIn()void` ABI method.
     *
     * Opt in to start tracking contributions
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optIn: (params: CallParams<ContributionLoggerArgs['obj']['optIn()void'] | ContributionLoggerArgs['tuple']['optIn()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ContributionLoggerParamsFactory.optIn(params))
    },

    /**
     * Makes a call to the ContributionLogger smart contract using the `getContractStats()(uint64,uint64)` ABI method.
     *
     * Get contract statistics
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getContractStats: (params: CallParams<ContributionLoggerArgs['obj']['getContractStats()(uint64,uint64)'] | ContributionLoggerArgs['tuple']['getContractStats()(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ContributionLoggerParamsFactory.getContractStats(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ContributionLogger smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ContributionLogger smart contract using the `logContribution(address,string,uint64,string,string)uint64` ABI method.
     *
     * Log a contribution (called by authorized organizers)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    logContribution: (params: CallParams<ContributionLoggerArgs['obj']['logContribution(address,string,uint64,string,string)uint64'] | ContributionLoggerArgs['tuple']['logContribution(address,string,uint64,string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ContributionLoggerParamsFactory.logContribution(params))
    },

    /**
     * Makes a call to the ContributionLogger smart contract using the `verifyContribution(uint64)(uint64,uint64)` ABI method.
     *
     * Verify a contribution exists and return details
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    verifyContribution: (params: CallParams<ContributionLoggerArgs['obj']['verifyContribution(uint64)(uint64,uint64)'] | ContributionLoggerArgs['tuple']['verifyContribution(uint64)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ContributionLoggerParamsFactory.verifyContribution(params))
    },

    /**
     * Makes a call to the ContributionLogger smart contract using the `getVolunteerStats(address)(uint64,uint64,uint64)` ABI method.
     *
     * Get volunteer statistics
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getVolunteerStats: (params: CallParams<ContributionLoggerArgs['obj']['getVolunteerStats(address)(uint64,uint64,uint64)'] | ContributionLoggerArgs['tuple']['getVolunteerStats(address)(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ContributionLoggerParamsFactory.getVolunteerStats(params))
    },

    /**
     * Makes a call to the ContributionLogger smart contract using the `bulkLogContributions(address[],string,uint64[],string[])uint64` ABI method.
     *
     * Bulk log contributions (for efficiency)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bulkLogContributions: (params: CallParams<ContributionLoggerArgs['obj']['bulkLogContributions(address[],string,uint64[],string[])uint64'] | ContributionLoggerArgs['tuple']['bulkLogContributions(address[],string,uint64[],string[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ContributionLoggerParamsFactory.bulkLogContributions(params))
    },

    /**
     * Makes a call to the ContributionLogger smart contract using the `optIn()void` ABI method.
     *
     * Opt in to start tracking contributions
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optIn: (params: CallParams<ContributionLoggerArgs['obj']['optIn()void'] | ContributionLoggerArgs['tuple']['optIn()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ContributionLoggerParamsFactory.optIn(params))
    },

    /**
     * Makes a call to the ContributionLogger smart contract using the `getContractStats()(uint64,uint64)` ABI method.
     *
     * Get contract statistics
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getContractStats: (params: CallParams<ContributionLoggerArgs['obj']['getContractStats()(uint64,uint64)'] | ContributionLoggerArgs['tuple']['getContractStats()(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ContributionLoggerParamsFactory.getContractStats(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ContributionLogger smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ContributionLogger smart contract using the `logContribution(address,string,uint64,string,string)uint64` ABI method.
     *
     * Log a contribution (called by authorized organizers)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    logContribution: async (params: CallParams<ContributionLoggerArgs['obj']['logContribution(address,string,uint64,string,string)uint64'] | ContributionLoggerArgs['tuple']['logContribution(address,string,uint64,string,string)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ContributionLoggerParamsFactory.logContribution(params))
      return {...result, return: result.return as unknown as (undefined | ContributionLoggerReturns['logContribution(address,string,uint64,string,string)uint64'])}
    },

    /**
     * Makes a call to the ContributionLogger smart contract using the `verifyContribution(uint64)(uint64,uint64)` ABI method.
     *
     * Verify a contribution exists and return details
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    verifyContribution: async (params: CallParams<ContributionLoggerArgs['obj']['verifyContribution(uint64)(uint64,uint64)'] | ContributionLoggerArgs['tuple']['verifyContribution(uint64)(uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ContributionLoggerParamsFactory.verifyContribution(params))
      return {...result, return: result.return as unknown as (undefined | ContributionLoggerReturns['verifyContribution(uint64)(uint64,uint64)'])}
    },

    /**
     * Makes a call to the ContributionLogger smart contract using the `getVolunteerStats(address)(uint64,uint64,uint64)` ABI method.
     *
     * Get volunteer statistics
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getVolunteerStats: async (params: CallParams<ContributionLoggerArgs['obj']['getVolunteerStats(address)(uint64,uint64,uint64)'] | ContributionLoggerArgs['tuple']['getVolunteerStats(address)(uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ContributionLoggerParamsFactory.getVolunteerStats(params))
      return {...result, return: result.return as unknown as (undefined | ContributionLoggerReturns['getVolunteerStats(address)(uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the ContributionLogger smart contract using the `bulkLogContributions(address[],string,uint64[],string[])uint64` ABI method.
     *
     * Bulk log contributions (for efficiency)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bulkLogContributions: async (params: CallParams<ContributionLoggerArgs['obj']['bulkLogContributions(address[],string,uint64[],string[])uint64'] | ContributionLoggerArgs['tuple']['bulkLogContributions(address[],string,uint64[],string[])uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ContributionLoggerParamsFactory.bulkLogContributions(params))
      return {...result, return: result.return as unknown as (undefined | ContributionLoggerReturns['bulkLogContributions(address[],string,uint64[],string[])uint64'])}
    },

    /**
     * Makes a call to the ContributionLogger smart contract using the `optIn()void` ABI method.
     *
     * Opt in to start tracking contributions
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optIn: async (params: CallParams<ContributionLoggerArgs['obj']['optIn()void'] | ContributionLoggerArgs['tuple']['optIn()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ContributionLoggerParamsFactory.optIn(params))
      return {...result, return: result.return as unknown as (undefined | ContributionLoggerReturns['optIn()void'])}
    },

    /**
     * Makes a call to the ContributionLogger smart contract using the `getContractStats()(uint64,uint64)` ABI method.
     *
     * Get contract statistics
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getContractStats: async (params: CallParams<ContributionLoggerArgs['obj']['getContractStats()(uint64,uint64)'] | ContributionLoggerArgs['tuple']['getContractStats()(uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ContributionLoggerParamsFactory.getContractStats(params))
      return {...result, return: result.return as unknown as (undefined | ContributionLoggerReturns['getContractStats()(uint64,uint64)'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new ContributionLoggerClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current ContributionLogger app
   */
  state = {
    /**
     * Methods to access global state for the current ContributionLogger app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          organizerRegistryAppId: result.organizerRegistryAppId,
          totalContributions: result.totalContributions,
          contributionCounter: result.contributionCounter,
        }
      },
      /**
       * Get the current value of the organizerRegistryAppId key in global state
       */
      organizerRegistryAppId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("organizerRegistryAppId")) as bigint | undefined },
      /**
       * Get the current value of the totalContributions key in global state
       */
      totalContributions: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalContributions")) as bigint | undefined },
      /**
       * Get the current value of the contributionCounter key in global state
       */
      contributionCounter: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("contributionCounter")) as bigint | undefined },
    },
    /**
     * Methods to access local state for the current ContributionLogger app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            volunteerContributions: result.volunteerContributions,
            volunteerReputation: result.volunteerReputation,
            lastContributionTime: result.lastContributionTime,
          }
        },
        /**
         * Get the current value of the volunteerContributions key in local state
         */
        volunteerContributions: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("volunteerContributions")) as bigint | undefined },
        /**
         * Get the current value of the volunteerReputation key in local state
         */
        volunteerReputation: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("volunteerReputation")) as bigint | undefined },
        /**
         * Get the current value of the lastContributionTime key in local state
         */
        lastContributionTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("lastContributionTime")) as bigint | undefined },
      }
    },
  }

  public newGroup(): ContributionLoggerComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a logContribution(address,string,uint64,string,string)uint64 method call against the ContributionLogger contract
       */
      logContribution(params: CallParams<ContributionLoggerArgs['obj']['logContribution(address,string,uint64,string,string)uint64'] | ContributionLoggerArgs['tuple']['logContribution(address,string,uint64,string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.logContribution(params)))
        resultMappers.push((v) => client.decodeReturnValue('logContribution(address,string,uint64,string,string)uint64', v))
        return this
      },
      /**
       * Add a verifyContribution(uint64)(uint64,uint64) method call against the ContributionLogger contract
       */
      verifyContribution(params: CallParams<ContributionLoggerArgs['obj']['verifyContribution(uint64)(uint64,uint64)'] | ContributionLoggerArgs['tuple']['verifyContribution(uint64)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.verifyContribution(params)))
        resultMappers.push((v) => client.decodeReturnValue('verifyContribution(uint64)(uint64,uint64)', v))
        return this
      },
      /**
       * Add a getVolunteerStats(address)(uint64,uint64,uint64) method call against the ContributionLogger contract
       */
      getVolunteerStats(params: CallParams<ContributionLoggerArgs['obj']['getVolunteerStats(address)(uint64,uint64,uint64)'] | ContributionLoggerArgs['tuple']['getVolunteerStats(address)(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getVolunteerStats(params)))
        resultMappers.push((v) => client.decodeReturnValue('getVolunteerStats(address)(uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a bulkLogContributions(address[],string,uint64[],string[])uint64 method call against the ContributionLogger contract
       */
      bulkLogContributions(params: CallParams<ContributionLoggerArgs['obj']['bulkLogContributions(address[],string,uint64[],string[])uint64'] | ContributionLoggerArgs['tuple']['bulkLogContributions(address[],string,uint64[],string[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bulkLogContributions(params)))
        resultMappers.push((v) => client.decodeReturnValue('bulkLogContributions(address[],string,uint64[],string[])uint64', v))
        return this
      },
      /**
       * Add a optIn()void method call against the ContributionLogger contract
       */
      optIn(params: CallParams<ContributionLoggerArgs['obj']['optIn()void'] | ContributionLoggerArgs['tuple']['optIn()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optIn(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getContractStats()(uint64,uint64) method call against the ContributionLogger contract
       */
      getContractStats(params: CallParams<ContributionLoggerArgs['obj']['getContractStats()(uint64,uint64)'] | ContributionLoggerArgs['tuple']['getContractStats()(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getContractStats(params)))
        resultMappers.push((v) => client.decodeReturnValue('getContractStats()(uint64,uint64)', v))
        return this
      },
      /**
       * Add a clear state call to the ContributionLogger contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as ContributionLoggerComposer
  }
}
export type ContributionLoggerComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the logContribution(address,string,uint64,string,string)uint64 ABI method.
   *
   * Log a contribution (called by authorized organizers)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  logContribution(params?: CallParams<ContributionLoggerArgs['obj']['logContribution(address,string,uint64,string,string)uint64'] | ContributionLoggerArgs['tuple']['logContribution(address,string,uint64,string,string)uint64']>): ContributionLoggerComposer<[...TReturns, ContributionLoggerReturns['logContribution(address,string,uint64,string,string)uint64'] | undefined]>

  /**
   * Calls the verifyContribution(uint64)(uint64,uint64) ABI method.
   *
   * Verify a contribution exists and return details
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  verifyContribution(params?: CallParams<ContributionLoggerArgs['obj']['verifyContribution(uint64)(uint64,uint64)'] | ContributionLoggerArgs['tuple']['verifyContribution(uint64)(uint64,uint64)']>): ContributionLoggerComposer<[...TReturns, ContributionLoggerReturns['verifyContribution(uint64)(uint64,uint64)'] | undefined]>

  /**
   * Calls the getVolunteerStats(address)(uint64,uint64,uint64) ABI method.
   *
   * Get volunteer statistics
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVolunteerStats(params?: CallParams<ContributionLoggerArgs['obj']['getVolunteerStats(address)(uint64,uint64,uint64)'] | ContributionLoggerArgs['tuple']['getVolunteerStats(address)(uint64,uint64,uint64)']>): ContributionLoggerComposer<[...TReturns, ContributionLoggerReturns['getVolunteerStats(address)(uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the bulkLogContributions(address[],string,uint64[],string[])uint64 ABI method.
   *
   * Bulk log contributions (for efficiency)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bulkLogContributions(params?: CallParams<ContributionLoggerArgs['obj']['bulkLogContributions(address[],string,uint64[],string[])uint64'] | ContributionLoggerArgs['tuple']['bulkLogContributions(address[],string,uint64[],string[])uint64']>): ContributionLoggerComposer<[...TReturns, ContributionLoggerReturns['bulkLogContributions(address[],string,uint64[],string[])uint64'] | undefined]>

  /**
   * Calls the optIn()void ABI method.
   *
   * Opt in to start tracking contributions
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optIn(params?: CallParams<ContributionLoggerArgs['obj']['optIn()void'] | ContributionLoggerArgs['tuple']['optIn()void']>): ContributionLoggerComposer<[...TReturns, ContributionLoggerReturns['optIn()void'] | undefined]>

  /**
   * Calls the getContractStats()(uint64,uint64) ABI method.
   *
   * Get contract statistics
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getContractStats(params?: CallParams<ContributionLoggerArgs['obj']['getContractStats()(uint64,uint64)'] | ContributionLoggerArgs['tuple']['getContractStats()(uint64,uint64)']>): ContributionLoggerComposer<[...TReturns, ContributionLoggerReturns['getContractStats()(uint64,uint64)'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ContributionLogger smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): ContributionLoggerComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): ContributionLoggerComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<ContributionLoggerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<ContributionLoggerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<ContributionLoggerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<ContributionLoggerComposerResults<TReturns>>
}
export type ContributionLoggerComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

