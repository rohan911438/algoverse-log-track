import { TestNetClient } from './testnet-client.js';
import algosdk from 'algosdk';
import * as fs from 'fs';
import * as path from 'path';

/**
 * Hackathon Deployment Script for TestNet
 * Deploys OrganizerRegistry and ContributionLogger contracts directly to TestNet
 */

async function deployContracts() {
    console.log('üåü AlgoVerse Log Track - TestNet Deployment');
    console.log('==========================================\n');

    const client = new TestNetClient();

    // Test connection first
    const connected = await client.testConnection();
    if (!connected) {
        console.log('‚ùå Cannot connect to TestNet. Check your API key and internet connection.');
        return;
    }

    // Check deployer account
    const deployerAccount = client.getDeployerAccount();
    if (!deployerAccount) {
        console.log('‚ùå Deployer account not configured. Set DEPLOYER_MNEMONIC in .env.testnet');
        return;
    }

    console.log(`üë§ Deployer: ${deployerAccount.addr}`);
    
    // Check balance
    const balance = await client.checkBalance(deployerAccount.addr);
    if (balance < 0.5) {
        console.log('‚ùå Insufficient balance. You need at least 0.5 ALGO for deployment.');
        console.log('üí° Get TestNet ALGO from: https://dispenser.testnet.aws.algodev.network/');
        return;
    }

    console.log('\nüèóÔ∏è  Starting Contract Deployment...\n');

    try {
        // Deploy OrganizerRegistry first
        console.log('1Ô∏è‚É£  Deploying OrganizerRegistry...');
        const organizerRegistryAppId = await deployOrganizerRegistry(client);
        
        if (!organizerRegistryAppId) {
            console.log('‚ùå Failed to deploy OrganizerRegistry');
            return;
        }

        // Deploy ContributionLogger with registry reference
        console.log('\n2Ô∏è‚É£  Deploying ContributionLogger...');
        const contributionLoggerAppId = await deployContributionLogger(client, organizerRegistryAppId);
        
        if (!contributionLoggerAppId) {
            console.log('‚ùå Failed to deploy ContributionLogger');
            return;
        }

        // Update environment file
        client.updateEnvFile(organizerRegistryAppId, contributionLoggerAppId);

        console.log('\nüéâ DEPLOYMENT SUCCESSFUL! üéâ');
        console.log('================================');
        console.log(`üì± OrganizerRegistry App ID: ${organizerRegistryAppId}`);
        console.log(`üì± ContributionLogger App ID: ${contributionLoggerAppId}`);
        console.log(`üîó Explorer: https://testnet.algoexplorer.io/`);
        console.log('\n‚ú® Your contracts are now live on TestNet!');
        console.log('üí° Update your frontend .env with these App IDs');
        
    } catch (error) {
        console.error('‚ùå Deployment failed:', error);
    }
}

async function deployOrganizerRegistry(client: TestNetClient): Promise<number | null> {
    // For hackathon purposes, we'll use pre-compiled TEAL
    // In production, you'd compile from TealScript
    
    const approvalProgram = createOrganizerRegistryApprovalProgram();
    const clearProgram = createBasicClearProgram();
    
    const globalSchema = new algosdk.StateSchema(3, 1); // 3 ints, 1 bytes
    const localSchema = new algosdk.StateSchema(3, 0);  // 3 ints, 0 bytes

    const appId = await client.deployContract(
        'OrganizerRegistry',
        approvalProgram,
        clearProgram,
        globalSchema,
        localSchema
    );

    if (appId) {
        // Initialize the contract
        await client.callContractMethod(appId, 'createApplication');
    }

    return appId;
}

async function deployContributionLogger(client: TestNetClient, registryAppId: number): Promise<number | null> {
    const approvalProgram = createContributionLoggerApprovalProgram();
    const clearProgram = createBasicClearProgram();
    
    const globalSchema = new algosdk.StateSchema(3, 0); // 3 ints, 0 bytes  
    const localSchema = new algosdk.StateSchema(3, 0);  // 3 ints, 0 bytes

    const appArgs = [algosdk.encodeUint64(registryAppId)];

    const appId = await client.deployContract(
        'ContributionLogger',
        approvalProgram,
        clearProgram,
        globalSchema,
        localSchema,
        appArgs
    );

    if (appId) {
        // Initialize the contract
        await client.callContractMethod(appId, 'createApplication', [registryAppId]);
    }

    return appId;
}

// Simplified TEAL programs for hackathon (normally generated by TealScript compiler)
function createOrganizerRegistryApprovalProgram(): Uint8Array {
    // Basic approval program that allows all operations
    // In production, this would be generated from TealScript
    const teal = `#pragma version 8
// OrganizerRegistry Approval Program (Hackathon Version)
txn ApplicationID
int 0
==
bnz handle_creation

// Handle application calls
txn OnCompletion
int NoOp
==
bnz handle_noop

// Reject other operations
int 0
return

handle_creation:
// Store owner
byte "owner"
txn Sender
app_global_put

byte "total_organizers"
int 0
app_global_put

byte "total_contributions" 
int 0
app_global_put

int 1
return

handle_noop:
// Allow all NoOp calls for simplicity
int 1
return`;

    // Convert TEAL to bytecode (simplified for hackathon)
    // In production, use algosdk.compileProgram()
    return new TextEncoder().encode(teal);
}

function createContributionLoggerApprovalProgram(): Uint8Array {
    const teal = `#pragma version 8
// ContributionLogger Approval Program (Hackathon Version)
txn ApplicationID
int 0
==
bnz handle_creation

txn OnCompletion
int NoOp
==
bnz handle_noop

int 0
return

handle_creation:
byte "organizer_registry_app"
txn ApplicationArgs 0
btoi
app_global_put

byte "total_contributions"
int 0
app_global_put

byte "contribution_counter"
int 0
app_global_put

int 1
return

handle_noop:
int 1
return`;

    return new TextEncoder().encode(teal);
}

function createBasicClearProgram(): Uint8Array {
    const teal = `#pragma version 8
// Basic clear program - always approve
int 1
return`;
    
    return new TextEncoder().encode(teal);
}

// Test connection function
async function testConnection() {
    const client = new TestNetClient();
    await client.testConnection();
    
    const account = client.getDeployerAccount();
    if (account) {
        await client.checkBalance(account.addr);
    }
}

// Main execution
if (process.argv[2] === 'test') {
    testConnection();
} else {
    deployContracts();
}